###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     11/Nov/2009  15:21:57 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  E:\PROJECTs\ARM\ESL_LanPING\startups\board_lowlevel.c    #
#    Command line =  E:\PROJECTs\ARM\ESL_LanPING\startups\board_lowlevel.c    #
#                    -D PROTO_BORD -lC E:\PROJECTs\ARM\ESL_LanPING\base_confi #
#                    g_debug\List\ -o E:\PROJECTs\ARM\ESL_LanPING\base_config #
#                    _debug\Obj\ --no_cse --no_unroll --no_inline             #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=ARM7TDMI   #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Norma #
#                    l.h" -I E:\PROJECTs\ARM\ESL_LanPING\startups\ -I         #
#                    E:\PROJECTs\ARM\ESL_LanPING\startups\at91sam7s32\ -I     #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\ -I                  #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\uip\ -I "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4\arm\INC\"       #
#                    --interwork --cpu_mode arm -On                           #
#    List file    =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\List\board #
#                    _lowlevel.lst                                            #
#    Object file  =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\Obj\board_ #
#                    lowlevel.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

E:\PROJECTs\ARM\ESL_LanPING\startups\board_lowlevel.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          
     31          //------------------------------------------------------------------------------
     32          //         Headers
     33          //------------------------------------------------------------------------------
     34          
     35          //#include "board.h"
     36          //#include "board_memories.h"
     37          //#include <pmc/pmc.h>
     38          #include "AT91SAM7S32.h"
     39          //------------------------------------------------------------------------------
     40          //         Internal definitions
     41          //------------------------------------------------------------------------------
     42          // Startup time of main oscillator (in number of slow clock ticks).
     43          #define BOARD_OSCOUNT           (AT91C_CKGR_OSCOUNT & (0x40 << 8))
     44          
     45          // USB PLL divisor value to obtain a 48MHz clock.
     46          #define BOARD_USBDIV            AT91C_CKGR_USBDIV_1
     47          
     48          // PLL frequency range.
     49          #define BOARD_CKGR_PLL          AT91C_CKGR_OUT_0
     50          
     51          // PLL startup time (in number of slow clock ticks).
     52          #define BOARD_PLLCOUNT          (16 << 8)
     53          
     54          // PLL MUL value.
     55          #define BOARD_MUL               (AT91C_CKGR_MUL & (72 << 16))
     56          
     57          // PLL DIV value.
     58          #define BOARD_DIV               (AT91C_CKGR_DIV & 14)
     59          
     60          // Master clock prescaler value.
     61          #define BOARD_PRESCALER         AT91C_PMC_PRES_CLK_2
     62          
     63          //------------------------------------------------------------------------------
     64          //         Internal functions
     65          //------------------------------------------------------------------------------
     66          //------------------------------------------------------------------------------
     67          /// Default spurious interrupt handler. Infinite loop.
     68          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     69          void defaultSpuriousHandler( void )
     70          {
     71              while (1);
   \                     defaultSpuriousHandler:
   \                     ??defaultSpuriousHandler_0:
   \   00000000   FEFFFFEA           B        ??defaultSpuriousHandler_0
     72          }
     73          
     74          //------------------------------------------------------------------------------
     75          /// Default handler for fast interrupt requests. Infinite loop.
     76          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     77          void defaultFiqHandler( void )
     78          {
     79              while (1);
   \                     defaultFiqHandler:
   \                     ??defaultFiqHandler_0:
   \   00000000   FEFFFFEA           B        ??defaultFiqHandler_0
     80          }
     81          
     82          //------------------------------------------------------------------------------
     83          /// Default handler for standard interrupt requests. Infinite loop.
     84          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     85          void defaultIrqHandler( void )
     86          {
     87              while (1);
   \                     defaultIrqHandler:
   \                     ??defaultIrqHandler_0:
   \   00000000   FEFFFFEA           B        ??defaultIrqHandler_0
     88          }
     89          
     90          //------------------------------------------------------------------------------
     91          //         Global Functions
     92          //------------------------------------------------------------------------------
     93          
     94          //------------------------------------------------------------------------------
     95          /// Performs the low-level initialization of the chip. This includes EFC, master
     96          /// clock, AIC & watchdog configuration, as well as memory remapping.
     97          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     98          void LowLevelInit(void)
     99          {
    100              unsigned char i;
    101          
    102              // Set flash wait states in the EFC
    103              // 48MHz = 1 wait state
    104          #if defined(at91sam7s512)
    105              AT91C_BASE_EFC0->EFC_FMR = AT91C_MC_FWS_1FWS;
    106              AT91C_BASE_EFC1->EFC_FMR = AT91C_MC_FWS_1FWS;
    107          #else
    108              AT91C_BASE_MC->MC_FMR = AT91C_MC_FWS_1FWS;
   \                     LowLevelInit:
   \   00000000   9F10E0E3           MVN      R1,#+159
   \   00000004   402FA0E3           MOV      R2,#+256
   \   00000008   002081E5           STR      R2,[R1, #+0]
    109          #endif
    110          
    111              // Initialize main oscillator
    112              AT91C_BASE_PMC->PMC_MOR = BOARD_OSCOUNT | AT91C_CKGR_MOSCEN;
   \   0000000C   DF10E0E3           MVN      R1,#+223
   \   00000010   C01FC1E3           BIC      R1,R1,#0x300
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   402C82E3           ORR      R2,R2,#0x4000
   \   0000001C   002081E5           STR      R2,[R1, #+0]
    113              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCS));
   \                     ??LowLevelInit_0:
   \   00000020   9710E0E3           MVN      R1,#+151
   \   00000024   C01FC1E3           BIC      R1,R1,#0x300
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   010011E3           TST      R1,#0x1
   \   00000030   FAFFFF0A           BEQ      ??LowLevelInit_0
    114          
    115              // Initialize PLL at 96MHz (96.109) and USB clock to 48MHz
    116              AT91C_BASE_PMC->PMC_PLLR = BOARD_USBDIV | BOARD_CKGR_PLL | BOARD_PLLCOUNT
    117                                         | BOARD_MUL | BOARD_DIV;
   \   00000034   D310E0E3           MVN      R1,#+211
   \   00000038   C01FC1E3           BIC      R1,R1,#0x300
   \   0000003C   68219FE5           LDR      R2,??LowLevelInit_1  ;; 0x1048100e
   \   00000040   002081E5           STR      R2,[R1, #+0]
    118              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCK));
   \                     ??LowLevelInit_2:
   \   00000044   9710E0E3           MVN      R1,#+151
   \   00000048   C01FC1E3           BIC      R1,R1,#0x300
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   040011E3           TST      R1,#0x4
   \   00000054   FAFFFF0A           BEQ      ??LowLevelInit_2
    119          
    120              // Wait for the master clock if it was already initialized
    121              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??LowLevelInit_3:
   \   00000058   9710E0E3           MVN      R1,#+151
   \   0000005C   C01FC1E3           BIC      R1,R1,#0x300
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   080011E3           TST      R1,#0x8
   \   00000068   FAFFFF0A           BEQ      ??LowLevelInit_3
    122          
    123              // Switch to slow clock + prescaler
    124              AT91C_BASE_PMC->PMC_MCKR = BOARD_PRESCALER;
   \   0000006C   CF10E0E3           MVN      R1,#+207
   \   00000070   C01FC1E3           BIC      R1,R1,#0x300
   \   00000074   0420A0E3           MOV      R2,#+4
   \   00000078   002081E5           STR      R2,[R1, #+0]
    125              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??LowLevelInit_4:
   \   0000007C   9710E0E3           MVN      R1,#+151
   \   00000080   C01FC1E3           BIC      R1,R1,#0x300
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   080011E3           TST      R1,#0x8
   \   0000008C   FAFFFF0A           BEQ      ??LowLevelInit_4
    126          
    127              // Switch to fast clock + prescaler
    128              AT91C_BASE_PMC->PMC_MCKR |= AT91C_PMC_CSS_PLL_CLK;
   \   00000090   CF10E0E3           MVN      R1,#+207
   \   00000094   C01FC1E3           BIC      R1,R1,#0x300
   \   00000098   001091E5           LDR      R1,[R1, #+0]
   \   0000009C   031091E3           ORRS     R1,R1,#0x3
   \   000000A0   CF20E0E3           MVN      R2,#+207
   \   000000A4   C02FC2E3           BIC      R2,R2,#0x300
   \   000000A8   001082E5           STR      R1,[R2, #+0]
    129              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??LowLevelInit_5:
   \   000000AC   9710E0E3           MVN      R1,#+151
   \   000000B0   C01FC1E3           BIC      R1,R1,#0x300
   \   000000B4   001091E5           LDR      R1,[R1, #+0]
   \   000000B8   080011E3           TST      R1,#0x8
   \   000000BC   FAFFFF0A           BEQ      ??LowLevelInit_5
    130          
    131              // Initialize AIC
    132              AT91C_BASE_AIC->AIC_IDCR = 0xFFFFFFFF;
   \   000000C0   DB10E0E3           MVN      R1,#+219
   \   000000C4   E01EC1E3           BIC      R1,R1,#0xE00
   \   000000C8   0020E0E3           MVN      R2,#+0
   \   000000CC   002081E5           STR      R2,[R1, #+0]
    133              AT91C_BASE_AIC->AIC_SVR[0] = (unsigned int) defaultFiqHandler;
   \   000000D0   7F10E0E3           MVN      R1,#+127
   \   000000D4   F01EC1E3           BIC      R1,R1,#0xF00
   \   000000D8   D0209FE5           LDR      R2,??LowLevelInit_1+0x4  ;; defaultFiqHandler
   \   000000DC   002081E5           STR      R2,[R1, #+0]
    134              for (i = 1; i < 31; i++) {
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   0100B0E1           MOVS     R0,R1
   \                     ??LowLevelInit_6:
   \   000000E8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000EC   1F0050E3           CMP      R0,#+31
   \   000000F0   0700002A           BCS      ??LowLevelInit_7
    135          
    136                  AT91C_BASE_AIC->AIC_SVR[i] = (unsigned int) defaultIrqHandler;
   \   000000F4   0010B0E1           MOVS     R1,R0
   \   000000F8   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   000000FC   0420A0E3           MOV      R2,#+4
   \   00000100   920111E0           MULS     R1,R2,R1
   \   00000104   A8209FE5           LDR      R2,??LowLevelInit_1+0x8  ;; defaultIrqHandler
   \   00000108   802F01E5           STR      R2,[R1, #-3968]
    137              }
   \   0000010C   010090E2           ADDS     R0,R0,#+1
   \   00000110   F4FFFFEA           B        ??LowLevelInit_6
    138              AT91C_BASE_AIC->AIC_SPU = (unsigned int) defaultSpuriousHandler;
   \                     ??LowLevelInit_7:
   \   00000114   CB10E0E3           MVN      R1,#+203
   \   00000118   E01EC1E3           BIC      R1,R1,#0xE00
   \   0000011C   94209FE5           LDR      R2,??LowLevelInit_1+0xC  ;; defaultSpuriousHandler
   \   00000120   002081E5           STR      R2,[R1, #+0]
    139          
    140              // Unstack nested interrupts
    141              for (i = 0; i < 8 ; i++) {
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   0100B0E1           MOVS     R0,R1
   \                     ??LowLevelInit_8:
   \   0000012C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000130   080050E3           CMP      R0,#+8
   \   00000134   0500002A           BCS      ??LowLevelInit_9
    142          
    143                  AT91C_BASE_AIC->AIC_EOICR = 0;
   \   00000138   CF10E0E3           MVN      R1,#+207
   \   0000013C   E01EC1E3           BIC      R1,R1,#0xE00
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   002081E5           STR      R2,[R1, #+0]
    144              }
   \   00000148   010090E2           ADDS     R0,R0,#+1
   \   0000014C   F6FFFFEA           B        ??LowLevelInit_8
    145          
    146              // Enable Debug mode
    147              AT91C_BASE_AIC->AIC_DCR = AT91C_AIC_DCR_PROT;
   \                     ??LowLevelInit_9:
   \   00000150   C710E0E3           MVN      R1,#+199
   \   00000154   E01EC1E3           BIC      R1,R1,#0xE00
   \   00000158   0120A0E3           MOV      R2,#+1
   \   0000015C   002081E5           STR      R2,[R1, #+0]
    148          
    149              // Watchdog initialization
    150              AT91C_BASE_WDTC->WDTC_WDMR = AT91C_WDTC_WDDIS;
   \   00000160   BB10E0E3           MVN      R1,#+187
   \   00000164   801FC1E3           BIC      R1,R1,#0x200
   \   00000168   802CA0E3           MOV      R2,#+32768
   \   0000016C   002081E5           STR      R2,[R1, #+0]
    151          
    152              // Remap the internal SRAM at 0x0
    153          //    BOARD_RemapRam();
    154          
    155              // Disable RTT and PIT interrupts (potential problem when program A
    156              // configures RTT, then program B wants to use PIT only, interrupts
    157              // from the RTT will still occur since they both use AT91C_ID_SYS)
    158              AT91C_BASE_RTTC->RTTC_RTMR &= ~(AT91C_RTTC_ALMIEN | AT91C_RTTC_RTTINCIEN);
   \   00000170   DF10E0E3           MVN      R1,#+223
   \   00000174   801FC1E3           BIC      R1,R1,#0x200
   \   00000178   001091E5           LDR      R1,[R1, #+0]
   \   0000017C   C01BD1E3           BICS     R1,R1,#0x30000
   \   00000180   DF20E0E3           MVN      R2,#+223
   \   00000184   802FC2E3           BIC      R2,R2,#0x200
   \   00000188   001082E5           STR      R1,[R2, #+0]
    159              AT91C_BASE_PITC->PITC_PIMR &= ~AT91C_PITC_PITIEN;
   \   0000018C   CF10E0E3           MVN      R1,#+207
   \   00000190   801FC1E3           BIC      R1,R1,#0x200
   \   00000194   001091E5           LDR      R1,[R1, #+0]
   \   00000198   8017D1E3           BICS     R1,R1,#0x2000000
   \   0000019C   CF20E0E3           MVN      R2,#+207
   \   000001A0   802FC2E3           BIC      R2,R2,#0x200
   \   000001A4   001082E5           STR      R1,[R2, #+0]
    160          }
   \   000001A8   1EFF2FE1           BX       LR               ;; return
   \                     ??LowLevelInit_1:
   \   000001AC   0E104810           DC32     0x1048100e
   \   000001B0   ........           DC32     defaultFiqHandler
   \   000001B4   ........           DC32     defaultIrqHandler
   \   000001B8   ........           DC32     defaultSpuriousHandler
    161          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     LowLevelInit                0
     defaultFiqHandler           0
     defaultIrqHandler           0
     defaultSpuriousHandler      0


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     defaultSpuriousHandler    4
     defaultFiqHandler         4
     defaultIrqHandler         4
     LowLevelInit            444

 
 456 bytes in section .text
 
 456 bytes of CODE memory

Errors: none
Warnings: none
