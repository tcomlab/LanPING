###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     11/Nov/2009  14:17:11 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  E:\PROJECTs\ARM\ESL_LanPING\Sources\memb.c               #
#    Command line =  E:\PROJECTs\ARM\ESL_LanPING\Sources\memb.c -D            #
#                    PROTO_BORD -lC E:\PROJECTs\ARM\ESL_LanPING\base_config_d #
#                    ebug\List\ -o E:\PROJECTs\ARM\ESL_LanPING\base_config_de #
#                    bug\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=ARM7TDMI   #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Norma #
#                    l.h" -I E:\PROJECTs\ARM\ESL_LanPING\startups\ -I         #
#                    E:\PROJECTs\ARM\ESL_LanPING\startups\at91sam7s32\ -I     #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\ -I                  #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\uip\ -I "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4\arm\INC\"       #
#                    --interwork --cpu_mode arm -On                           #
#    List file    =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\List\memb. #
#                    lst                                                      #
#    Object file  =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\Obj\memb.o #
#                                                                             #
#                                                                             #
###############################################################################

E:\PROJECTs\ARM\ESL_LanPING\Sources\memb.c
      1          /*
                  ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           * Copyright (c) 2004, Swedish Institute of Computer Science.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. Neither the name of the Institute nor the names of its contributors
     14           *    may be used to endorse or promote products derived from this software
     15           *    without specific prior written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
     18           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     19           * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
     21           * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     23           * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     24           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     25           * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     26           * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     27           * SUCH DAMAGE.
     28           *
     29           * This file is part of the uIP TCP/IP stack
     30           *
     31           * Author: Adam Dunkels <adam@sics.se>
     32           *
     33           * $Id: memb.c,v 1.1 2006/06/12 08:21:43 adam Exp $
     34           */
     35          
     36          /**
     37           * \addtogroup memb
     38           * @{
     39           */
     40          
     41           /**
     42           * \file
     43           * Memory block allocation routines.
     44           * \author Adam Dunkels <adam@sics.se>
     45           */
     46          #include <string.h>

   \                                 In section .text, align 4
   \   __??Code32?? __intrinsic __code __interwork void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0520B0E1           MOVS     R2,R5
   \   00000014   0610B0E1           MOVS     R1,R6
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           BL       __aeabi_memset
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
     47          
     48          #include "memb.h"
     49          
     50          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     51          void
     52          memb_init(struct memb_blocks *m)
     53          {
   \                     memb_init:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     54            memset(m->count, 0, m->num);
   \   00000008   B220D4E1           LDRH     R2,[R4, #+2]
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   040094E5           LDR      R0,[R4, #+4]
   \   00000014   ........           BL       memset
     55            memset(m->mem, 0, m->size * m->num);
   \   00000018   B000D4E1           LDRH     R0,[R4, #+0]
   \   0000001C   B210D4E1           LDRH     R1,[R4, #+2]
   \   00000020   910012E0           MULS     R2,R1,R0
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   ........           BL       memset
     56          }
   \   00000030   1040BDE8           POP      {R4,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     57          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     58          void *
     59          memb_alloc(struct memb_blocks *m)
     60          {
   \                     memb_alloc:
   \   00000000   0010B0E1           MOVS     R1,R0
     61            int i;
     62          
     63            for(i = 0; i < m->num; ++i) {
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   0020B0E1           MOVS     R2,R0
   \                     ??memb_alloc_0:
   \   0000000C   B200D1E1           LDRH     R0,[R1, #+2]
   \   00000010   000052E1           CMP      R2,R0
   \   00000014   0E0000AA           BGE      ??memb_alloc_1
     64              if(m->count[i] == 0) {
   \   00000018   040091E5           LDR      R0,[R1, #+4]
   \   0000001C   0000D2E7           LDRB     R0,[R2, +R0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0800001A           BNE      ??memb_alloc_2
     65                /* If this block was unused, we increase the reference count to
     66          	 indicate that it now is used and return a pointer to the
     67          	 memory block. */
     68                ++(m->count[i]);
   \   00000028   040091E5           LDR      R0,[R1, #+4]
   \   0000002C   0000D2E7           LDRB     R0,[R2, +R0]
   \   00000030   010090E2           ADDS     R0,R0,#+1
   \   00000034   043091E5           LDR      R3,[R1, #+4]
   \   00000038   0300C2E7           STRB     R0,[R2, +R3]
     69                return (void *)((char *)m->mem + (i * m->size));
   \   0000003C   B030D1E1           LDRH     R3,[R1, #+0]
   \   00000040   080091E5           LDR      R0,[R1, #+8]
   \   00000044   930220E0           MLA      R0,R3,R2,R0
   \   00000048   020000EA           B        ??memb_alloc_3
     70              }
     71            }
   \                     ??memb_alloc_2:
   \   0000004C   012092E2           ADDS     R2,R2,#+1
   \   00000050   EDFFFFEA           B        ??memb_alloc_0
     72          
     73            /* No free block was found, so we return NULL to indicate failure to
     74               allocate block. */
     75            return NULL;
   \                     ??memb_alloc_1:
   \   00000054   0000A0E3           MOV      R0,#+0
   \                     ??memb_alloc_3:
   \   00000058   1EFF2FE1           BX       LR               ;; return
     76          }
     77          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     78          char
     79          memb_free(struct memb_blocks *m, void *ptr)
     80          {
   \                     memb_free:
   \   00000000   00502DE9           PUSH     {R12,LR}
   \   00000004   0020B0E1           MOVS     R2,R0
     81            int i;
     82            char *ptr2;
     83          
     84            /* Walk through the list of blocks and try to find the block to
     85               which the pointer "ptr" points to. */
     86            ptr2 = (char *)m->mem;
   \   00000008   080092E5           LDR      R0,[R2, #+8]
   \   0000000C   00C0B0E1           MOVS     R12,R0
     87            for(i = 0; i < m->num; ++i) {
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0030B0E1           MOVS     R3,R0
   \                     ??memb_free_0:
   \   00000018   B200D2E1           LDRH     R0,[R2, #+2]
   \   0000001C   000053E1           CMP      R3,R0
   \   00000020   110000AA           BGE      ??memb_free_1
     88              
     89              if(ptr2 == (char *)ptr) {
   \   00000024   01005CE1           CMP      R12,R1
   \   00000028   0B00001A           BNE      ??memb_free_2
     90                /* We've found to block to which "ptr" points so we decrease the
     91          	 reference count and return the new value of it. */
     92                if(m->count[i] > 0) {
   \   0000002C   040092E5           LDR      R0,[R2, #+4]
   \   00000030   0000D3E7           LDRB     R0,[R3, +R0]
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   0400003A           BCC      ??memb_free_3
     93          	/* Make sure that we don't deallocate free memory. */
     94          	--(m->count[i]);
   \   0000003C   040092E5           LDR      R0,[R2, #+4]
   \   00000040   0000D3E7           LDRB     R0,[R3, +R0]
   \   00000044   010050E2           SUBS     R0,R0,#+1
   \   00000048   04E092E5           LDR      LR,[R2, #+4]
   \   0000004C   0E00C3E7           STRB     R0,[R3, +LR]
     95                }
     96                return m->count[i];
   \                     ??memb_free_3:
   \   00000050   040092E5           LDR      R0,[R2, #+4]
   \   00000054   0000D3E7           LDRB     R0,[R3, +R0]
   \   00000058   040000EA           B        ??memb_free_4
     97              }
     98              ptr2 += m->size;
   \                     ??memb_free_2:
   \   0000005C   B000D2E1           LDRH     R0,[R2, #+0]
   \   00000060   0CC090E0           ADDS     R12,R0,R12
     99            }
   \   00000064   013093E2           ADDS     R3,R3,#+1
   \   00000068   EAFFFFEA           B        ??memb_free_0
    100            return -1;
                          ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \                     ??memb_free_1:
   \   0000006C   FF00A0E3           MOV      R0,#+255
   \                     ??memb_free_4:
   \   00000070   0240BDE8           POP      {R1,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    101          }
    102          /*---------------------------------------------------------------------------*/
    103          
    104          /** @} */

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     memb_alloc      0
     memb_free       8
     memb_init       8
     memset         16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     memset           44
     memb_init        56
     memb_alloc       92
     memb_free       120

 
 312 bytes in section .text
 
 268 bytes of CODE memory (+ 44 bytes shared)

Errors: none
Warnings: 2
