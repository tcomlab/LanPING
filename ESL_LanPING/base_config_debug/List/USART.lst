###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     11/Nov/2009  13:42:14 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  E:\PROJECTs\ARM\ESL_LanPING\Sources\USART.c              #
#    Command line =  E:\PROJECTs\ARM\ESL_LanPING\Sources\USART.c -D           #
#                    at91sam7s32 -D flash -D TRACE_LEVEL=4 -D PROTO_BORD -lC  #
#                    E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\List\      #
#                    --remarks --diag_suppress Pe826,Pe1375 -o                #
#                    E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\Obj\       #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian=little --cpu=ARM7TDMI -e --fpu=None -I  #
#                    E:\PROJECTs\ARM\ESL_LanPING\startups\ -I                 #
#                    E:\PROJECTs\ARM\ESL_LanPING\startups\at91sam7s32\ -I     #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\ -I                  #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\uip\ -I "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4\arm\INC\"       #
#                    --interwork --cpu_mode arm -Om                           #
#    List file    =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\List\USART #
#                    .lst                                                     #
#    Object file  =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\Obj\USART. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\PROJECTs\ARM\ESL_LanPING\Sources\USART.c
      1          #include "AT91SAM7S32.h"
      2          #include "USART.h"
      3          //-------------------------------------------------------------------------
      4          
      5          //-------------------------------------------------------------------------
      6          

   \                                 In section .data, align 4
      7          AT91S_DBGU * pUSART = AT91C_BASE_DBGU;      /* Global Pointer to USART0 */
   \                     pUSART:
   \   00000000   00F2FFFF           DC32 0FFFFF200H
      8          // AT91S_PMC * pPMC = AT91C_BASE_PMC;
      9          
     10          //-------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     11          void RX_interrapt (void)
     12          {
     13            unsigned char byte;
     14            byte = pUSART->DBGU_RHR;
   \                     RX_interrapt:
   \   00000000   ........           LDR      R0,??DataTable3  ;; pUSART
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   180090E5           LDR      R0,[R0, #+24]
     15            byte = byte;
     16            //uart0_puts("OK");
     17          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     18          //-------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     19          void uart0_init (void) {                   /* Initialize Serial Interface */
     20          
     21            // AT91S_PMC * pPMC = AT91C_BASE_PMC;
     22            // pPMC->PMC_PCER = (1 << AT91C_ID_US0);
     23            // AT91C_BASE_PMC->PMC_PCER = (1 << AT91C_ID_US0);
     24            *AT91C_PIOA_OER = AT91C_PA10_DTXD;
   \                     uart0_init:
   \   00000000   840FA0E3           MOV      R0,#+528
   \   00000004   401EA0E3           MOV      R1,#+1024
   \   00000008   001E00E5           STR      R1,[R0, #-3584]
     25            *AT91C_PIOA_ODR = AT91C_PA9_DRXD;
   \   0000000C   850FA0E3           MOV      R0,#+532
   \   00000010   801FA0E3           MOV      R1,#+512
   \   00000014   001E00E5           STR      R1,[R0, #-3584]
     26            *AT91C_PIOA_ASR = AT91C_PA10_DTXD | AT91C_PA9_DRXD;
   \   00000018   600EA0E3           MOV      R0,#+1536
   \   0000001C   9C1FA0E3           MOV      R1,#+624
   \   00000020   000E01E5           STR      R0,[R1, #-3584]
     27            *AT91C_PIOA_PDR = AT91C_PA10_DTXD | AT91C_PA9_DRXD;
   \   00000024   811FA0E3           MOV      R1,#+516
   \   00000028   000E01E5           STR      R0,[R1, #-3584]
     28          
     29            *AT91C_DBGU_MR = AT91C_US_PAR_NONE | AT91C_US_CHMODE_NORMAL;
   \   0000002C   0400A0E3           MOV      R0,#+4
   \   00000030   801EA0E3           MOV      R1,#+2048
   \   00000034   001E00E5           STR      R1,[R0, #-3584]
     30            *AT91C_DBGU_IDR= 0xffffffff;
   \   00000038   0C00A0E3           MOV      R0,#+12
   \   0000003C   0010E0E3           MVN      R1,#+0
   \   00000040   001E00E5           STR      R1,[R0, #-3584]
     31          
     32            *AT91C_DBGU_BRGR = MCK / (115200 * 16);
   \   00000044   2000A0E3           MOV      R0,#+32
   \   00000048   1A10A0E3           MOV      R1,#+26
   \   0000004C   001E00E5           STR      R1,[R0, #-3584]
     33            *AT91C_DBGU_CR =  AT91C_US_RXEN | AT91C_US_TXEN;
   \   00000050   FF00E0E3           MVN      R0,#+255
   \   00000054   D00EC0E3           BIC      R0,R0,#0xD00
   \   00000058   5010A0E3           MOV      R1,#+80
   \   0000005C   001080E5           STR      R1,[R0, #+0]
     34          
     35          
     36          }
   \   00000060   1EFF2FE1           BX       LR               ;; return
     37          //-------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     38          int uart0_putc(int ch) 
     39          {
     40          	while (!(pUSART->DBGU_CSR & AT91C_US_TXRDY));   /* Wait for Empty Tx Buffer */
   \                     uart0_putc:
   \                     ??uart0_putc_0:
   \   00000000   ........           LDR      R1,??DataTable3  ;; pUSART
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   142091E5           LDR      R2,[R1, #+20]
   \   0000000C   020012E3           TST      R2,#0x2
   \   00000010   FAFFFF0A           BEQ      ??uart0_putc_0
     41          	return (pUSART->DBGU_THR = ch);                 /* Transmit Character */
   \   00000014   1C0081E5           STR      R0,[R1, #+28]
   \   00000018   1EFF2FE1           BX       LR               ;; return
     42          }	
     43          //-------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     44          int uart0_putchar (int ch) {                      /* Write Character to Serial Port */
   \                     uart0_putchar:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     45          
     46            if (ch == '\n')  {                            /* Check for LF */
   \   00000008   0A0054E3           CMP      R4,#+10
   \   0000000C   0100001A           BNE      ??uart0_putchar_0
     47              uart0_putc( '\r' );                         /* Output CR */
   \   00000010   0D00A0E3           MOV      R0,#+13
   \   00000014   ........           BL       uart0_putc
     48            }
     49            return uart0_putc( ch );                     /* Transmit Character */
   \                     ??uart0_putchar_0:
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   ........           B        uart0_putc       ;; tailcall
     50          }
     51          //-------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     52          int uart0_puts ( char* s )
     53          {
   \                     uart0_puts:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   010000EA           B        ??uart0_puts_0
     54          	while ( *s ) uart0_putchar( *s++ );
   \                     ??uart0_puts_1:
   \   0000000C   0100D4E4           LDRB     R0,[R4], #+1
   \   00000010   ........           BL       uart0_putchar
   \                     ??uart0_puts_0:
   \   00000014   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   FAFFFF1A           BNE      ??uart0_puts_1
     55          	return 0;
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
     56          }
     57          //-------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     58          int uart0_kbhit( void ) /* returns true if character in receive buffer */
     59          {
     60          	if ( pUSART->DBGU_CSR & AT91C_US_RXRDY) {
   \                     uart0_kbhit:
   \   00000000   ........           LDR      R0,??DataTable3  ;; pUSART
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   140090E5           LDR      R0,[R0, #+20]
   \   0000000C   010010E3           TST      R0,#0x1
   \   00000010   0100000A           BEQ      ??uart0_kbhit_0
     61          		return 1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   1EFF2FE1           BX       LR
     62          	}
     63          	else {
     64          		return 0;
   \                     ??uart0_kbhit_0:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   1EFF2FE1           BX       LR               ;; return
     65          	}
     66          }
     67          //-------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     68          int uart0_getc ( void )  /* Read Character from Serial Port */
     69          {    
     70          
     71            while (!(pUSART->DBGU_CSR & AT91C_US_RXRDY));   /* Wait for Full Rx Buffer */
   \                     uart0_getc:
   \                     ??uart0_getc_0:
   \   00000000   ........           LDR      R0,??DataTable3  ;; pUSART
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   141090E5           LDR      R1,[R0, #+20]
   \   0000000C   010011E3           TST      R1,#0x1
   \   00000010   FAFFFF0A           BEQ      ??uart0_getc_0
     72            return (pUSART->DBGU_RHR);                      /* Read Character */
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   1EFF2FE1           BX       LR               ;; return
     73          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     pUSART
     74          //-------------------------------------------------------------------------------
     75          

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     RX_interrapt       0
     uart0_getc         0
     uart0_init         0
     uart0_kbhit        0
     uart0_putc         0
     uart0_putchar      8
     uart0_puts         8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     pUSART            4
     RX_interrapt     16
     uart0_init      100
     uart0_putc       28
     uart0_putchar    36
     uart0_puts       40
     uart0_kbhit      36
     uart0_getc       28
     ??DataTable3      4

 
   4 bytes in section .data
 288 bytes in section .text
 
 288 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
