###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     11/Nov/2009  14:17:10 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  E:\PROJECTs\ARM\ESL_LanPING\Sources\telnetd.c            #
#    Command line =  E:\PROJECTs\ARM\ESL_LanPING\Sources\telnetd.c -D         #
#                    PROTO_BORD -lC E:\PROJECTs\ARM\ESL_LanPING\base_config_d #
#                    ebug\List\ -o E:\PROJECTs\ARM\ESL_LanPING\base_config_de #
#                    bug\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=ARM7TDMI   #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Norma #
#                    l.h" -I E:\PROJECTs\ARM\ESL_LanPING\startups\ -I         #
#                    E:\PROJECTs\ARM\ESL_LanPING\startups\at91sam7s32\ -I     #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\ -I                  #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\uip\ -I "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4\arm\INC\"       #
#                    --interwork --cpu_mode arm -On                           #
#    List file    =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\List\telne #
#                    td.lst                                                   #
#    Object file  =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\Obj\telnet #
#                    d.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\PROJECTs\ARM\ESL_LanPING\Sources\telnetd.c
      1          /*
      2           * Copyright (c) 2003, Adam Dunkels.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without
      6           * modification, are permitted provided that the following conditions
      7           * are met:
      8           * 1. Redistributions of source code must retain the above copyright
      9           *    notice, this list of conditions and the following disclaimer.
     10           * 2. Redistributions in binary form must reproduce the above copyright
     11           *    notice, this list of conditions and the following disclaimer in the
     12           *    documentation and/or other materials provided with the distribution.
     13           * 3. The name of the author may not be used to endorse or promote
     14           *    products derived from this software without specific prior
     15           *    written permission.
     16           *
     17           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
     18           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     19           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     20           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
     21           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     22           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
     23           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     24           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     25           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     26           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     27           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     28           *
     29           * This file is part of the uIP TCP/IP stack
     30           *
     31           * $Id: telnetd.c,v 1.2 2006/06/07 09:43:54 adam Exp $
     32           *
     33           */
     34          
     35          #include "uip.h"
     36          #include "telnetd.h"
     37          #include "memb.h"

  /*
   ^
"E:\PROJECTs\ARM\ESL_LanPING\Sources\memb.h",1  Warning[Pa050]: non-native end
          of line sequence detected (this diagnostic is only issued once)
     38          #include "shell.h"
     39          
     40          #include <string.h>

   \                                 In section .text, align 4
   \   __??Code32?? __intrinsic __code __interwork void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0620B0E1           MOVS     R2,R6
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           BL       __aeabi_memcpy
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   7040BDE8           POP      {R4-R6,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
     41          
     42          #define ISO_nl       0x0a
     43          #define ISO_cr       0x0d
     44          
     45          struct telnetd_line {
     46            char line[TELNETD_CONF_LINELEN];
     47          };

   \                                 In section .data, align 4
     48          MEMB(linemem, struct telnetd_line, TELNETD_CONF_NUMLINES);
   \                     linemem:
   \   00000000   40001200           DC16 64, 18
   \   00000004   ............       DC32 linemem_memb_count, linemem_memb_mem
   \              ....        

   \                                 In section .bss, align 4
   \   static char __data linemem_memb_count[18]
   \                     linemem_memb_count:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \   static struct telnetd_line __data linemem_memb_mem[18]
   \                     linemem_memb_mem:
   \   00000000                      DS8 1152
     49          
     50          #define STATE_NORMAL 0
     51          #define STATE_IAC    1
     52          #define STATE_WILL   2
     53          #define STATE_WONT   3
     54          #define STATE_DO     4
     55          #define STATE_DONT   5
     56          #define STATE_CLOSE  6
     57          

   \                                 In section .bss, align 4
     58          static struct telnetd_state s;
   \                     s:
   \   00000000                      DS8 140
     59          
     60          #define TELNET_IAC   255
     61          #define TELNET_WILL  251
     62          #define TELNET_WONT  252
     63          #define TELNET_DO    253
     64          #define TELNET_DONT  254
     65          
     66          extern unsigned char autorization ;
     67          
     68          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     69          static char *
     70          alloc_line(void)
     71          {
   \                     alloc_line:
   \   00000000   00502DE9           PUSH     {R12,LR}
     72            return memb_alloc(&linemem);
   \   00000004   ........           LDR      R0,??DataTable6  ;; linemem
   \   00000008   ........           BL       memb_alloc
   \   0000000C   0240BDE8           POP      {R1,LR}
   \   00000010   1EFF2FE1           BX       LR               ;; return
     73          }
     74          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     75          static void
     76          dealloc_line(char *line)
     77          {
   \                     dealloc_line:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     78            memb_free(&linemem, line);
   \   00000008   0410B0E1           MOVS     R1,R4
   \   0000000C   ........           LDR      R0,??DataTable6  ;; linemem
   \   00000010   ........           BL       memb_free
     79          }
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return
     80          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     81          void
     82          shell_quit(char *str)
     83          {
     84            s.state = STATE_CLOSE;
   \                     shell_quit:
   \   00000000   ........           LDR      R1,??DataTable57  ;; s + 138
   \   00000004   0620A0E3           MOV      R2,#+6
   \   00000008   0020C1E5           STRB     R2,[R1, #+0]
     85            autorization = 0;
   \   0000000C   ........           LDR      R1,??DataTable59  ;; autorization
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0020C1E5           STRB     R2,[R1, #+0]
     86          }
   \   00000018   1EFF2FE1           BX       LR               ;; return
     87          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
     88          static void
     89          sendline(char *line)
     90          {
   \                     sendline:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     91            static unsigned int i;
     92            
     93            for(i = 0; i < TELNETD_CONF_NUMLINES; ++i) {
   \   00000008   88009FE5           LDR      R0,??sendline_0  ;; ??i
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \                     ??sendline_1:
   \   00000014   7C009FE5           LDR      R0,??sendline_0  ;; ??i
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   120050E3           CMP      R0,#+18
   \   00000020   1400002A           BCS      ??sendline_2
     94              if(s.lines[i] == NULL) {
   \   00000024   6C009FE5           LDR      R0,??sendline_0  ;; ??i
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   0410A0E3           MOV      R1,#+4
   \   00000030   ........           LDR      R2,??DataTable53  ;; s
   \   00000034   912020E0           MLA      R0,R1,R0,R2
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0600001A           BNE      ??sendline_3
     95                s.lines[i] = line;
   \   00000044   4C009FE5           LDR      R0,??sendline_0  ;; ??i
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   0410A0E3           MOV      R1,#+4
   \   00000050   ........           LDR      R2,??DataTable53  ;; s
   \   00000054   912020E0           MLA      R0,R1,R0,R2
   \   00000058   004080E5           STR      R4,[R0, #+0]
     96                break;
   \   0000005C   050000EA           B        ??sendline_4
     97              }
     98            }
   \                     ??sendline_3:
   \   00000060   30009FE5           LDR      R0,??sendline_0  ;; ??i
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   010090E2           ADDS     R0,R0,#+1
   \   0000006C   24109FE5           LDR      R1,??sendline_0  ;; ??i
   \   00000070   000081E5           STR      R0,[R1, #+0]
   \   00000074   E6FFFFEA           B        ??sendline_1
     99            if(i == TELNETD_CONF_NUMLINES) {
   \                     ??sendline_2:
   \                     ??sendline_4:
   \   00000078   18009FE5           LDR      R0,??sendline_0  ;; ??i
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   120050E3           CMP      R0,#+18
   \   00000084   0100001A           BNE      ??sendline_5
    100              dealloc_line(line);
   \   00000088   0400B0E1           MOVS     R0,R4
   \   0000008C   ........           BL       dealloc_line
    101            }
    102          }
   \                     ??sendline_5:
   \   00000090   1040BDE8           POP      {R4,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     ??sendline_0:
   \   00000098   ........           DC32     ??i

   \                                 In section .bss, align 4
   \                     ??i:
   \   00000000                      DS8 4
    103          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    104          void
    105          shell_prompt(char *str)
    106          {
   \                     shell_prompt:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    107            char *line;
    108            line = alloc_line();
   \   00000008   ........           BL       alloc_line
   \   0000000C   0050B0E1           MOVS     R5,R0
    109            if(line != NULL) {
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0500000A           BEQ      ??shell_prompt_0
    110              strncpy(line, str, TELNETD_CONF_LINELEN);
   \   00000018   4020A0E3           MOV      R2,#+64
   \   0000001C   0410B0E1           MOVS     R1,R4
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   ........           BL       strncpy
    111              /*    petsciiconv_toascii(line, TELNETD_CONF_LINELEN);*/
    112              sendline(line);
   \   00000028   0500B0E1           MOVS     R0,R5
   \   0000002C   ........           BL       sendline
    113            }
    114          }
   \                     ??shell_prompt_0:
   \   00000030   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
    115          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    116          void
    117          shell_output(char *str1, char *str2)
    118          {
   \                     shell_output:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    119            static unsigned len;
    120            char *line;
    121          
    122            line = alloc_line();
   \   0000000C   ........           BL       alloc_line
   \   00000010   0060B0E1           MOVS     R6,R0
    123            if(line != NULL) {
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   2B00000A           BEQ      ??shell_output_0
    124              len = strlen(str1);
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           BL       strlen
   \   00000024   A8109FE5           LDR      R1,??shell_output_1  ;; ??len
   \   00000028   000081E5           STR      R0,[R1, #+0]
    125              strncpy(line, str1, TELNETD_CONF_LINELEN);
   \   0000002C   4020A0E3           MOV      R2,#+64
   \   00000030   0410B0E1           MOVS     R1,R4
   \   00000034   0600B0E1           MOVS     R0,R6
   \   00000038   ........           BL       strncpy
    126              if(len < TELNETD_CONF_LINELEN) {
   \   0000003C   90009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   400050E3           CMP      R0,#+64
   \   00000048   0700002A           BCS      ??shell_output_2
    127                strncpy(line + len, str2, TELNETD_CONF_LINELEN - len);
   \   0000004C   80009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   402070E2           RSBS     R2,R0,#+64
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   70009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   060090E0           ADDS     R0,R0,R6
   \   00000068   ........           BL       strncpy
    128              }
    129              len = strlen(line);
   \                     ??shell_output_2:
   \   0000006C   0600B0E1           MOVS     R0,R6
   \   00000070   ........           BL       strlen
   \   00000074   58109FE5           LDR      R1,??shell_output_1  ;; ??len
   \   00000078   000081E5           STR      R0,[R1, #+0]
    130              if(len < TELNETD_CONF_LINELEN - 2) {
   \   0000007C   50009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   3E0050E3           CMP      R0,#+62
   \   00000088   0D00002A           BCS      ??shell_output_3
    131                line[len] = ISO_cr;
   \   0000008C   40009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   0D10A0E3           MOV      R1,#+13
   \   00000098   0610C0E7           STRB     R1,[R0, +R6]
    132                line[len+1] = ISO_nl;
   \   0000009C   30009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   060090E0           ADDS     R0,R0,R6
   \   000000A8   0A10A0E3           MOV      R1,#+10
   \   000000AC   0110C0E5           STRB     R1,[R0, #+1]
    133                line[len+2] = 0;
   \   000000B0   1C009FE5           LDR      R0,??shell_output_1  ;; ??len
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   060090E0           ADDS     R0,R0,R6
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0210C0E5           STRB     R1,[R0, #+2]
    134              }
    135              /*    petsciiconv_toascii(line, TELNETD_CONF_LINELEN);*/
    136              sendline(line);
   \                     ??shell_output_3:
   \   000000C4   0600B0E1           MOVS     R0,R6
   \   000000C8   ........           BL       sendline
    137            }
    138          }
   \                     ??shell_output_0:
   \   000000CC   7040BDE8           POP      {R4-R6,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return
   \                     ??shell_output_1:
   \   000000D4   ........           DC32     ??len

   \                                 In section .bss, align 4
   \                     ??len:
   \   00000000                      DS8 4
    139          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    140          void
    141          telnetd_init(void)
    142          {
   \                     telnetd_init:
   \   00000000   00502DE9           PUSH     {R12,LR}
    143            uip_listen(HTONS(8001));
   \   00000004   1F00A0E3           MOV      R0,#+31
   \   00000008   410C80E3           ORR      R0,R0,#0x4100
   \   0000000C   ........           BL       uip_listen
    144            memb_init(&linemem);
   \   00000010   ........           LDR      R0,??DataTable6  ;; linemem
   \   00000014   ........           BL       memb_init
    145            shell_init();
   \   00000018   ........           BL       shell_init
    146            autorization = 0;
   \   0000001C   ........           LDR      R0,??DataTable59  ;; autorization
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0010C0E5           STRB     R1,[R0, #+0]
    147          }
   \   00000028   0140BDE8           POP      {R0,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    148          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    149          static void
    150          acked(void)
    151          {
   \                     acked:
   \   00000000   00502DE9           PUSH     {R12,LR}
    152            static unsigned int i;
    153            
    154            while(s.numsent > 0) {
   \                     ??acked_0:
   \   00000004   ........           LDR      R0,??DataTable22  ;; s + 137
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   2400003A           BCC      ??acked_1
    155              dealloc_line(s.lines[0]);
   \   00000014   ........           LDR      R0,??DataTable53  ;; s
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       dealloc_line
    156              for(i = 1; i < TELNETD_CONF_NUMLINES; ++i) {
   \   00000020   88009FE5           LDR      R0,??acked_2     ;; ??i_1
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
   \                     ??acked_3:
   \   0000002C   7C009FE5           LDR      R0,??acked_2     ;; ??i_1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   120050E3           CMP      R0,#+18
   \   00000038   1100002A           BCS      ??acked_4
    157                s.lines[i - 1] = s.lines[i];
   \   0000003C   6C009FE5           LDR      R0,??acked_2     ;; ??i_1
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   0410A0E3           MOV      R1,#+4
   \   00000048   ........           LDR      R2,??DataTable53  ;; s
   \   0000004C   912020E0           MLA      R0,R1,R0,R2
   \   00000050   58109FE5           LDR      R1,??acked_2     ;; ??i_1
   \   00000054   001091E5           LDR      R1,[R1, #+0]
   \   00000058   0420A0E3           MOV      R2,#+4
   \   0000005C   ........           LDR      R3,??DataTable53  ;; s
   \   00000060   923121E0           MLA      R1,R2,R1,R3
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   \   00000068   041000E5           STR      R1,[R0, #-4]
    158              }
   \   0000006C   3C009FE5           LDR      R0,??acked_2     ;; ??i_1
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   010090E2           ADDS     R0,R0,#+1
   \   00000078   30109FE5           LDR      R1,??acked_2     ;; ??i_1
   \   0000007C   000081E5           STR      R0,[R1, #+0]
   \   00000080   E9FFFFEA           B        ??acked_3
    159              s.lines[TELNETD_CONF_NUMLINES - 1] = NULL;
   \                     ??acked_4:
   \   00000084   28009FE5           LDR      R0,??acked_2+0x4  ;; s + 68
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   001080E5           STR      R1,[R0, #+0]
    160              --s.numsent;
   \   00000090   ........           LDR      R0,??DataTable22  ;; s + 137
   \   00000094   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000098   010050E2           SUBS     R0,R0,#+1
   \   0000009C   ........           LDR      R1,??DataTable22  ;; s + 137
   \   000000A0   0000C1E5           STRB     R0,[R1, #+0]
   \   000000A4   D6FFFFEA           B        ??acked_0
    161            }
    162          }
   \                     ??acked_1:
   \   000000A8   0140BDE8           POP      {R0,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
   \                     ??acked_2:
   \   000000B0   ........           DC32     ??i_1
   \   000000B4   ........           DC32     s + 68

   \                                 In section .bss, align 4
   \                     ??i_1:
   \   00000000                      DS8 4
    163          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    164          static void
    165          senddata(void)
    166          {
   \                     senddata:
   \   00000000   00502DE9           PUSH     {R12,LR}
    167            static char *bufptr, *lineptr;
    168            static int buflen, linelen;
    169            
    170            bufptr = uip_appdata;
   \   00000004   54019FE5           LDR      R0,??senddata_0  ;; ??bufptr
   \   00000008   ........           LDR      R1,??DataTable38  ;; uip_appdata
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
    171            buflen = 0;
   \   00000014   48019FE5           LDR      R0,??senddata_0+0x4  ;; ??buflen
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    172            for(s.numsent = 0; s.numsent < TELNETD_CONF_NUMLINES &&
   \   00000020   ........           LDR      R0,??DataTable22  ;; s + 137
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
    173          	s.lines[s.numsent] != NULL ; ++s.numsent) {
   \                     ??senddata_1:
   \   0000002C   ........           LDR      R0,??DataTable22  ;; s + 137
   \   00000030   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000034   120050E3           CMP      R0,#+18
   \   00000038   4100002A           BCS      ??senddata_2
   \   0000003C   ........           LDR      R0,??DataTable22  ;; s + 137
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   0410A0E3           MOV      R1,#+4
   \   00000048   ........           LDR      R2,??DataTable53  ;; s
   \   0000004C   912020E0           MLA      R0,R1,R0,R2
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   3900000A           BEQ      ??senddata_2
    174              lineptr = s.lines[s.numsent];
   \   0000005C   ........           LDR      R0,??DataTable22  ;; s + 137
   \   00000060   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000064   0410A0E3           MOV      R1,#+4
   \   00000068   ........           LDR      R2,??DataTable53  ;; s
   \   0000006C   912020E0           MLA      R0,R1,R0,R2
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   EC109FE5           LDR      R1,??senddata_0+0x8  ;; ??lineptr
   \   00000078   000081E5           STR      R0,[R1, #+0]
    175              linelen = strlen(lineptr);
   \   0000007C   E4009FE5           LDR      R0,??senddata_0+0x8  ;; ??lineptr
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   ........           BL       strlen
   \   00000088   DC109FE5           LDR      R1,??senddata_0+0xC  ;; ??linelen
   \   0000008C   000081E5           STR      R0,[R1, #+0]
    176              if(linelen > TELNETD_CONF_LINELEN) {
   \   00000090   D4009FE5           LDR      R0,??senddata_0+0xC  ;; ??linelen
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   410050E3           CMP      R0,#+65
   \   0000009C   020000BA           BLT      ??senddata_3
    177                linelen = TELNETD_CONF_LINELEN;
   \   000000A0   C4009FE5           LDR      R0,??senddata_0+0xC  ;; ??linelen
   \   000000A4   4010A0E3           MOV      R1,#+64
   \   000000A8   001080E5           STR      R1,[R0, #+0]
    178              }
    179              if(buflen + linelen < uip_mss()) {
   \                     ??senddata_3:
   \   000000AC   B0009FE5           LDR      R0,??senddata_0+0x4  ;; ??buflen
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   B0109FE5           LDR      R1,??senddata_0+0xC  ;; ??linelen
   \   000000B8   001091E5           LDR      R1,[R1, #+0]
   \   000000BC   000091E0           ADDS     R0,R1,R0
   \   000000C0   A8109FE5           LDR      R1,??senddata_0+0x10  ;; uip_conn
   \   000000C4   001091E5           LDR      R1,[R1, #+0]
   \   000000C8   B211D1E1           LDRH     R1,[R1, #+18]
   \   000000CC   010050E1           CMP      R0,R1
   \   000000D0   1A0000AA           BGE      ??senddata_4
    180                memcpy(bufptr, lineptr, linelen);
   \   000000D4   90009FE5           LDR      R0,??senddata_0+0xC  ;; ??linelen
   \   000000D8   002090E5           LDR      R2,[R0, #+0]
   \   000000DC   84009FE5           LDR      R0,??senddata_0+0x8  ;; ??lineptr
   \   000000E0   001090E5           LDR      R1,[R0, #+0]
   \   000000E4   74009FE5           LDR      R0,??senddata_0  ;; ??bufptr
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   \   000000EC   ........           BL       memcpy
    181                bufptr += linelen;
   \   000000F0   74009FE5           LDR      R0,??senddata_0+0xC  ;; ??linelen
   \   000000F4   000090E5           LDR      R0,[R0, #+0]
   \   000000F8   60109FE5           LDR      R1,??senddata_0  ;; ??bufptr
   \   000000FC   001091E5           LDR      R1,[R1, #+0]
   \   00000100   010090E0           ADDS     R0,R0,R1
   \   00000104   54109FE5           LDR      R1,??senddata_0  ;; ??bufptr
   \   00000108   000081E5           STR      R0,[R1, #+0]
    182                buflen += linelen;
   \   0000010C   50009FE5           LDR      R0,??senddata_0+0x4  ;; ??buflen
   \   00000110   000090E5           LDR      R0,[R0, #+0]
   \   00000114   50109FE5           LDR      R1,??senddata_0+0xC  ;; ??linelen
   \   00000118   001091E5           LDR      R1,[R1, #+0]
   \   0000011C   000091E0           ADDS     R0,R1,R0
   \   00000120   3C109FE5           LDR      R1,??senddata_0+0x4  ;; ??buflen
   \   00000124   000081E5           STR      R0,[R1, #+0]
    183              } else {
   \   00000128   ........           LDR      R0,??DataTable22  ;; s + 137
   \   0000012C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000130   010090E2           ADDS     R0,R0,#+1
   \   00000134   ........           LDR      R1,??DataTable22  ;; s + 137
   \   00000138   0000C1E5           STRB     R0,[R1, #+0]
   \   0000013C   BAFFFFEA           B        ??senddata_1
    184                break;
   \                     ??senddata_4:
   \   00000140   FFFFFFEA           B        ??senddata_5
    185              }
    186            }
    187            uip_send(uip_appdata, buflen);
   \                     ??senddata_2:
   \                     ??senddata_5:
   \   00000144   18009FE5           LDR      R0,??senddata_0+0x4  ;; ??buflen
   \   00000148   001090E5           LDR      R1,[R0, #+0]
   \   0000014C   ........           LDR      R0,??DataTable38  ;; uip_appdata
   \   00000150   000090E5           LDR      R0,[R0, #+0]
   \   00000154   ........           BL       uip_send
    188          }
   \   00000158   0140BDE8           POP      {R0,LR}
   \   0000015C   1EFF2FE1           BX       LR               ;; return
   \                     ??senddata_0:
   \   00000160   ........           DC32     ??bufptr
   \   00000164   ........           DC32     ??buflen
   \   00000168   ........           DC32     ??lineptr
   \   0000016C   ........           DC32     ??linelen
   \   00000170   ........           DC32     uip_conn

   \                                 In section .bss, align 4
   \                     ??bufptr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??lineptr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??buflen:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??linelen:
   \   00000000                      DS8 4
    189          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    190          static void
    191          closed(void)
    192          {
   \                     closed:
   \   00000000   00502DE9           PUSH     {R12,LR}
    193            static unsigned int i;
    194            
    195            for(i = 0; i < TELNETD_CONF_NUMLINES; ++i) {
   \   00000004   7C009FE5           LDR      R0,??closed_0    ;; ??i_2
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   \                     ??closed_1:
   \   00000010   70009FE5           LDR      R0,??closed_0    ;; ??i_2
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   120050E3           CMP      R0,#+18
   \   0000001C   1400002A           BCS      ??closed_2
    196              if(s.lines[i] != NULL) {
   \   00000020   60009FE5           LDR      R0,??closed_0    ;; ??i_2
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   0410A0E3           MOV      R1,#+4
   \   0000002C   ........           LDR      R2,??DataTable53  ;; s
   \   00000030   912020E0           MLA      R0,R1,R0,R2
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0600000A           BEQ      ??closed_3
    197                dealloc_line(s.lines[i]);
   \   00000040   40009FE5           LDR      R0,??closed_0    ;; ??i_2
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   0410A0E3           MOV      R1,#+4
   \   0000004C   ........           LDR      R2,??DataTable53  ;; s
   \   00000050   912020E0           MLA      R0,R1,R0,R2
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   ........           BL       dealloc_line
    198              }
    199            }
   \                     ??closed_3:
   \   0000005C   24009FE5           LDR      R0,??closed_0    ;; ??i_2
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   010090E2           ADDS     R0,R0,#+1
   \   00000068   18109FE5           LDR      R1,??closed_0    ;; ??i_2
   \   0000006C   000081E5           STR      R0,[R1, #+0]
   \   00000070   E6FFFFEA           B        ??closed_1
    200            autorization = 0;
   \                     ??closed_2:
   \   00000074   ........           LDR      R0,??DataTable59  ;; autorization
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   0010C0E5           STRB     R1,[R0, #+0]
    201          }
   \   00000080   0140BDE8           POP      {R0,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
   \                     ??closed_0:
   \   00000088   ........           DC32     ??i_2

   \                                 In section .bss, align 4
   \                     ??i_2:
   \   00000000                      DS8 4
    202          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    203          static void
    204          get_char(u8_t c)
    205          {
   \                     get_char:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    206            if(c == ISO_cr) {
   \   00000008   FF4014E2           ANDS     R4,R4,#0xFF      ;; Zero extend
   \   0000000C   0D0054E3           CMP      R4,#+13
   \   00000010   2400000A           BEQ      ??get_char_0
    207              return;
    208            }
    209            
    210            s.buf[(int)s.bufptr] = c;
   \                     ??get_char_1:
   \   00000014   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000018   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000001C   ........           LDR      R1,??DataTable53  ;; s
   \   00000020   010090E0           ADDS     R0,R0,R1
   \   00000024   4840C0E5           STRB     R4,[R0, #+72]
    211            if(s.buf[(int)s.bufptr] == ISO_nl ||
    212               s.bufptr == sizeof(s.buf) - 1) {
   \   00000028   ........           LDR      R0,??DataTable54  ;; s + 136
   \   0000002C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000030   ........           LDR      R1,??DataTable53  ;; s
   \   00000034   010090E0           ADDS     R0,R0,R1
   \   00000038   4800D0E5           LDRB     R0,[R0, #+72]
   \   0000003C   0A0050E3           CMP      R0,#+10
   \   00000040   0300000A           BEQ      ??get_char_2
   \   00000044   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   3F0050E3           CMP      R0,#+63
   \   00000050   0F00001A           BNE      ??get_char_3
    213              if(s.bufptr > 0) {
   \                     ??get_char_2:
   \   00000054   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000058   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   0500003A           BCC      ??get_char_4
    214                s.buf[(int)s.bufptr] = 0;
   \   00000064   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000068   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000006C   ........           LDR      R1,??DataTable53  ;; s
   \   00000070   010090E0           ADDS     R0,R0,R1
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   4810C0E5           STRB     R1,[R0, #+72]
    215                /*      petsciiconv_topetscii(s.buf, TELNETD_CONF_LINELEN);*/
    216              }
    217              shell_input(s.buf);
   \                     ??get_char_4:
   \   0000007C   2C009FE5           LDR      R0,??get_char_5  ;; s + 72
   \   00000080   ........           BL       shell_input
    218              s.bufptr = 0;
   \   00000084   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000090   040000EA           B        ??get_char_6
    219            } else {
    220              ++s.bufptr;
   \                     ??get_char_3:
   \   00000094   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000098   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000009C   010090E2           ADDS     R0,R0,#+1
   \   000000A0   ........           LDR      R1,??DataTable54  ;; s + 136
   \   000000A4   0000C1E5           STRB     R0,[R1, #+0]
    221            }
    222          }
   \                     ??get_char_6:
   \                     ??get_char_0:
   \   000000A8   1040BDE8           POP      {R4,LR}
   \   000000AC   1EFF2FE1           BX       LR               ;; return
   \                     ??get_char_5:
   \   000000B0   ........           DC32     s + 72
    223          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    224          static void
    225          sendopt(u8_t option, u8_t value)
    226          {
   \                     sendopt:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050B0E1           MOVS     R5,R0
   \   00000008   0140B0E1           MOVS     R4,R1
    227            char *line;
    228            line = alloc_line();
   \   0000000C   ........           BL       alloc_line
   \   00000010   0060B0E1           MOVS     R6,R0
    229            if(line != NULL) {
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   0700000A           BEQ      ??sendopt_0
    230              line[0] = TELNET_IAC;
   \   0000001C   FF00A0E3           MOV      R0,#+255
   \   00000020   0000C6E5           STRB     R0,[R6, #+0]
    231              line[1] = option;
   \   00000024   0150C6E5           STRB     R5,[R6, #+1]
    232              line[2] = value;
   \   00000028   0240C6E5           STRB     R4,[R6, #+2]
    233              line[3] = 0;
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0300C6E5           STRB     R0,[R6, #+3]
    234              sendline(line);
   \   00000034   0600B0E1           MOVS     R0,R6
   \   00000038   ........           BL       sendline
    235            }
    236          }
   \                     ??sendopt_0:
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return
    237          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    238          static void
    239          newdata(void)
    240          {
   \                     newdata:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    241            u16_t len;
    242            u8_t c;
    243            char *dataptr;
    244              
    245            
    246            len = uip_datalen();
   \   00000004   BC019FE5           LDR      R0,??newdata_1   ;; uip_len
   \   00000008   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000000C   0050B0E1           MOVS     R5,R0
    247            dataptr = (char *)uip_appdata;
   \   00000010   ........           LDR      R0,??DataTable38  ;; uip_appdata
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060B0E1           MOVS     R6,R0
    248            
    249            while(len > 0 && s.bufptr < sizeof(s.buf)) {
   \                     ??newdata_2:
   \   0000001C   0558A0E1           MOV      R5,R5, LSL #+16
   \   00000020   2558B0E1           MOVS     R5,R5, LSR #+16
   \   00000024   010055E3           CMP      R5,#+1
   \   00000028   6400003A           BCC      ??newdata_3
   \   0000002C   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000030   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000034   400050E3           CMP      R0,#+64
   \   00000038   6000002A           BCS      ??newdata_3
    250              c = *dataptr;
   \   0000003C   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000040   0040B0E1           MOVS     R4,R0
    251              ++dataptr;
   \   00000044   016096E2           ADDS     R6,R6,#+1
    252              --len;
   \   00000048   015055E2           SUBS     R5,R5,#+1
    253              switch(s.state) {
   \   0000004C   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000050   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000054   050050E3           CMP      R0,#+5
   \   00000058   5700008A           BHI      ??newdata_4
   \   0000005C   04108FE2           ADR      R1,??newdata_0
   \   00000060   0010D1E7           LDRB     R1,[R1, R0]
   \   00000064   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??newdata_0:
   \   00000068   4A012A32           DC8      +74,+1,+42,+50
   \   0000006C   3A420000           DC8      +58,+66,+0,+0
    254              case STATE_IAC:
    255                if(c == TELNET_IAC) {
   \                     ??newdata_5:
   \   00000070   FF4014E2           ANDS     R4,R4,#0xFF      ;; Zero extend
   \   00000074   FF0054E3           CMP      R4,#+255
   \   00000078   0600001A           BNE      ??newdata_6
    256          	get_char(c);
   \   0000007C   0400B0E1           MOVS     R0,R4
   \   00000080   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000084   ........           BL       get_char
    257          	s.state = STATE_NORMAL;
   \   00000088   ........           LDR      R0,??DataTable57  ;; s + 138
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   0010C0E5           STRB     R1,[R0, #+0]
   \   00000094   1D0000EA           B        ??newdata_7
    258                } else {
    259          	switch(c) {
   \                     ??newdata_6:
   \   00000098   0400B0E1           MOVS     R0,R4
   \   0000009C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000A0   FB0050E3           CMP      R0,#+251
   \   000000A4   0600000A           BEQ      ??newdata_8
   \   000000A8   FC0050E3           CMP      R0,#+252
   \   000000AC   0800000A           BEQ      ??newdata_9
   \   000000B0   FD0050E3           CMP      R0,#+253
   \   000000B4   0A00000A           BEQ      ??newdata_10
   \   000000B8   FE0050E3           CMP      R0,#+254
   \   000000BC   0C00000A           BEQ      ??newdata_11
   \   000000C0   0F0000EA           B        ??newdata_12
    260          	case TELNET_WILL:
    261          	  s.state = STATE_WILL;
   \                     ??newdata_8:
   \   000000C4   ........           LDR      R0,??DataTable57  ;; s + 138
   \   000000C8   0210A0E3           MOV      R1,#+2
   \   000000CC   0010C0E5           STRB     R1,[R0, #+0]
   \   000000D0   0E0000EA           B        ??newdata_13
    262          	  break;
    263          	case TELNET_WONT:
    264          	  s.state = STATE_WONT;
   \                     ??newdata_9:
   \   000000D4   ........           LDR      R0,??DataTable57  ;; s + 138
   \   000000D8   0310A0E3           MOV      R1,#+3
   \   000000DC   0010C0E5           STRB     R1,[R0, #+0]
   \   000000E0   0A0000EA           B        ??newdata_13
    265          	  break;
    266          	case TELNET_DO:
    267          	  s.state = STATE_DO;
   \                     ??newdata_10:
   \   000000E4   ........           LDR      R0,??DataTable57  ;; s + 138
   \   000000E8   0410A0E3           MOV      R1,#+4
   \   000000EC   0010C0E5           STRB     R1,[R0, #+0]
   \   000000F0   060000EA           B        ??newdata_13
    268          	  break;
    269          	case TELNET_DONT:
    270          	  s.state = STATE_DONT;
   \                     ??newdata_11:
   \   000000F4   ........           LDR      R0,??DataTable57  ;; s + 138
   \   000000F8   0510A0E3           MOV      R1,#+5
   \   000000FC   0010C0E5           STRB     R1,[R0, #+0]
   \   00000100   020000EA           B        ??newdata_13
    271          	  break;
    272          	default:
    273          	  s.state = STATE_NORMAL;
   \                     ??newdata_12:
   \   00000104   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   0010C0E5           STRB     R1,[R0, #+0]
   \                     ??newdata_13:
   \                     ??newdata_7:
   \   00000110   290000EA           B        ??newdata_14
    274          	  break;
    275          	}
    276                }
    277                break;
    278              case STATE_WILL:
    279                /* Reply with a DONT */
    280                sendopt(TELNET_DONT, c);
   \                     ??newdata_15:
   \   00000114   0410B0E1           MOVS     R1,R4
   \   00000118   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   0000011C   FE00A0E3           MOV      R0,#+254
   \   00000120   ........           BL       sendopt
    281                s.state = STATE_NORMAL;
   \   00000124   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000128   0010A0E3           MOV      R1,#+0
   \   0000012C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000130   210000EA           B        ??newdata_14
    282                break;
    283                
    284              case STATE_WONT:
    285                /* Reply with a DONT */
    286                sendopt(TELNET_DONT, c);
   \                     ??newdata_16:
   \   00000134   0410B0E1           MOVS     R1,R4
   \   00000138   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   0000013C   FE00A0E3           MOV      R0,#+254
   \   00000140   ........           BL       sendopt
    287                s.state = STATE_NORMAL;
   \   00000144   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000148   0010A0E3           MOV      R1,#+0
   \   0000014C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000150   190000EA           B        ??newdata_14
    288                break;
    289              case STATE_DO:
    290                /* Reply with a WONT */
    291                sendopt(TELNET_WONT, c);
   \                     ??newdata_17:
   \   00000154   0410B0E1           MOVS     R1,R4
   \   00000158   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   0000015C   FC00A0E3           MOV      R0,#+252
   \   00000160   ........           BL       sendopt
    292                s.state = STATE_NORMAL;
   \   00000164   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000168   0010A0E3           MOV      R1,#+0
   \   0000016C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000170   110000EA           B        ??newdata_14
    293                break;
    294              case STATE_DONT:
    295                /* Reply with a WONT */
    296                sendopt(TELNET_WONT, c);
   \                     ??newdata_18:
   \   00000174   0410B0E1           MOVS     R1,R4
   \   00000178   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   0000017C   FC00A0E3           MOV      R0,#+252
   \   00000180   ........           BL       sendopt
    297                s.state = STATE_NORMAL;
   \   00000184   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000188   0010A0E3           MOV      R1,#+0
   \   0000018C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000190   090000EA           B        ??newdata_14
    298                break;
    299              case STATE_NORMAL:
    300                if(c == TELNET_IAC) {
   \                     ??newdata_19:
   \   00000194   FF4014E2           ANDS     R4,R4,#0xFF      ;; Zero extend
   \   00000198   FF0054E3           CMP      R4,#+255
   \   0000019C   0300001A           BNE      ??newdata_20
    301          	s.state = STATE_IAC;
   \   000001A0   ........           LDR      R0,??DataTable57  ;; s + 138
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   0010C0E5           STRB     R1,[R0, #+0]
   \   000001AC   020000EA           B        ??newdata_21
    302                } else {
    303          	get_char(c);
   \                     ??newdata_20:
   \   000001B0   0400B0E1           MOVS     R0,R4
   \   000001B4   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000001B8   ........           BL       get_char
   \                     ??newdata_21:
   \                     ??newdata_14:
   \                     ??newdata_4:
   \   000001BC   96FFFFEA           B        ??newdata_2
    304                }
    305                break;
    306              }
    307          
    308              
    309            }
    310            
    311          }
   \                     ??newdata_3:
   \   000001C0   7040BDE8           POP      {R4-R6,LR}
   \   000001C4   1EFF2FE1           BX       LR               ;; return
   \                     ??newdata_1:
   \   000001C8   ........           DC32     uip_len
    312          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    313          void
    314          telnetd_appcall(void)
    315          {
   \                     telnetd_appcall:
   \   00000000   00502DE9           PUSH     {R12,LR}
    316            static unsigned int i; 
    317            if(uip_connected())
   \   00000004   24019FE5           LDR      R0,??telnetd_appcall_0  ;; uip_flags
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   400010E3           TST      R0,#0x40
   \   00000010   1D00000A           BEQ      ??telnetd_appcall_1
    318            {
    319              autorization = 0;
   \   00000014   ........           LDR      R0,??DataTable59  ;; autorization
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0010C0E5           STRB     R1,[R0, #+0]
    320              /*    tcp_markconn(uip_conn, &s);*/
    321              for(i = 0; i < TELNETD_CONF_NUMLINES; ++i) {
   \   00000020   0C019FE5           LDR      R0,??telnetd_appcall_0+0x4  ;; ??i_3
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   001080E5           STR      R1,[R0, #+0]
   \                     ??telnetd_appcall_2:
   \   0000002C   00019FE5           LDR      R0,??telnetd_appcall_0+0x4  ;; ??i_3
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   120050E3           CMP      R0,#+18
   \   00000038   0C00002A           BCS      ??telnetd_appcall_3
    322                s.lines[i] = NULL;
   \   0000003C   F0009FE5           LDR      R0,??telnetd_appcall_0+0x4  ;; ??i_3
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   0410A0E3           MOV      R1,#+4
   \   00000048   ........           LDR      R2,??DataTable53  ;; s
   \   0000004C   912020E0           MLA      R0,R1,R0,R2
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   001080E5           STR      R1,[R0, #+0]
    323              }
   \   00000058   D4009FE5           LDR      R0,??telnetd_appcall_0+0x4  ;; ??i_3
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   010090E2           ADDS     R0,R0,#+1
   \   00000064   C8109FE5           LDR      R1,??telnetd_appcall_0+0x4  ;; ??i_3
   \   00000068   000081E5           STR      R0,[R1, #+0]
   \   0000006C   EEFFFFEA           B        ??telnetd_appcall_2
    324              s.bufptr = 0;
   \                     ??telnetd_appcall_3:
   \   00000070   ........           LDR      R0,??DataTable54  ;; s + 136
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   0010C0E5           STRB     R1,[R0, #+0]
    325              s.state = STATE_NORMAL;
   \   0000007C   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   0010C0E5           STRB     R1,[R0, #+0]
    326              shell_start();
   \   00000088   ........           BL       shell_start
    327            }
    328          
    329            if(s.state == STATE_CLOSE)
   \                     ??telnetd_appcall_1:
   \   0000008C   ........           LDR      R0,??DataTable57  ;; s + 138
   \   00000090   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000094   060050E3           CMP      R0,#+6
   \   00000098   0900001A           BNE      ??telnetd_appcall_4
    330            {
    331              s.state = STATE_NORMAL;
   \   0000009C   ........           LDR      R0,??DataTable57  ;; s + 138
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   0010C0E5           STRB     R1,[R0, #+0]
    332              uip_close();
   \   000000A8   80009FE5           LDR      R0,??telnetd_appcall_0  ;; uip_flags
   \   000000AC   1010A0E3           MOV      R1,#+16
   \   000000B0   0010C0E5           STRB     R1,[R0, #+0]
    333              autorization = 0;
   \   000000B4   ........           LDR      R0,??DataTable59  ;; autorization
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   0010C0E5           STRB     R1,[R0, #+0]
    334              return;
   \   000000C0   180000EA           B        ??telnetd_appcall_5
    335            }
    336            
    337            if(uip_closed() ||
    338               uip_aborted() ||
    339               uip_timedout())
   \                     ??telnetd_appcall_4:
   \   000000C4   64009FE5           LDR      R0,??telnetd_appcall_0  ;; uip_flags
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   4F00D0E3           BICS     R0,R0,#0x4F
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0300000A           BEQ      ??telnetd_appcall_6
    340            {
    341              closed();
   \   000000D8   ........           BL       closed
    342              autorization = 0;
   \   000000DC   ........           LDR      R0,??DataTable59  ;; autorization
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   0010C0E5           STRB     R1,[R0, #+0]
    343            }
    344            
    345            if(uip_acked())
   \                     ??telnetd_appcall_6:
   \   000000E8   40009FE5           LDR      R0,??telnetd_appcall_0  ;; uip_flags
   \   000000EC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000F0   010010E3           TST      R0,#0x1
   \   000000F4   0000000A           BEQ      ??telnetd_appcall_7
    346            {
    347              acked();
   \   000000F8   ........           BL       acked
    348            }
    349            
    350            if(uip_newdata())
   \                     ??telnetd_appcall_7:
   \   000000FC   2C009FE5           LDR      R0,??telnetd_appcall_0  ;; uip_flags
   \   00000100   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000104   020010E3           TST      R0,#0x2
   \   00000108   0000000A           BEQ      ??telnetd_appcall_8
    351            {
    352              newdata();
   \   0000010C   ........           BL       newdata
    353            }
    354            
    355            if(uip_rexmit() ||
    356               uip_newdata() ||
    357               uip_acked() ||
    358               uip_connected() ||
    359               uip_poll())
   \                     ??telnetd_appcall_8:
   \   00000110   18009FE5           LDR      R0,??telnetd_appcall_0  ;; uip_flags
   \   00000114   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000118   B000D0E3           BICS     R0,R0,#0xB0
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   0000000A           BEQ      ??telnetd_appcall_9
    360            {
    361              senddata();
   \   00000124   ........           BL       senddata
    362            }
    363          }
   \                     ??telnetd_appcall_9:
   \                     ??telnetd_appcall_5:
   \   00000128   0140BDE8           POP      {R0,LR}
   \   0000012C   1EFF2FE1           BX       LR               ;; return
   \                     ??telnetd_appcall_0:
   \   00000130   ........           DC32     uip_flags
   \   00000134   ........           DC32     ??i_3

   \                                 In section .bss, align 4
   \                     ??i_3:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     linemem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     s + 137

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     uip_appdata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     s + 136

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   ........           DC32     s + 138

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     autorization
    364          
    365          
    366          //void
    367          //telnetd_appcall(void)
    368          //{
    369          //  
    370          //  
    371          //  switch (uip_conn->lport)
    372          //	{
    373          //		case HTONS(8001):
    374          //		telnet_app();
    375          //		break;
    376          //
    377          //		case HTONS(1468):
    378          //		syslog_sender();
    379          //		break;
    380          //
    381          //		default: /* Should never happen. */
    382          //		uip_abort();
    383          //		break;
    384          //	}
    385          //}
    386          
    387          /*---------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     acked                8
     alloc_line           8
     closed               8
     dealloc_line         8
     get_char             8
     memcpy              16
     newdata             16
     senddata             8
     sendline             8
     sendopt             16
     shell_output        16
     shell_prompt        16
     shell_quit           0
     telnetd_appcall      8
     telnetd_init         8


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     memcpy               44
     linemem              12
     linemem_memb_count   20
     linemem_memb_mem   1152
     s                   140
     alloc_line           20
     dealloc_line         28
     shell_quit           28
     sendline            156
     i                     4
     shell_prompt         56
     shell_output        216
     len                   4
     telnetd_init         48
     acked               184
     i                     4
     senddata            372
     bufptr                4
     lineptr               4
     buflen                4
     linelen               4
     closed              140
     i                     4
     get_char            180
     sendopt              68
     newdata             460
     telnetd_appcall     312
     i                     4
     ??DataTable6          4
     ??DataTable22         4
     ??DataTable38         4
     ??DataTable53         4
     ??DataTable54         4
     ??DataTable57         4
     ??DataTable59         4

 
 1 348 bytes in section .bss
    12 bytes in section .data
 2 340 bytes in section .text
 
 2 296 bytes of CODE memory (+ 44 bytes shared)
 1 360 bytes of DATA memory

Errors: none
Warnings: 1
