###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.0.51174/W32 for ARM     11/Nov/2009  15:20:42 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  arm                                                      #
#    Endian       =  little                                                   #
#    Source file  =  E:\PROJECTs\ARM\ESL_LanPING\Sources\CP2200.c             #
#    Command line =  E:\PROJECTs\ARM\ESL_LanPING\Sources\CP2200.c -D          #
#                    PROTO_BORD -lC E:\PROJECTs\ARM\ESL_LanPING\base_config_d #
#                    ebug\List\ -o E:\PROJECTs\ARM\ESL_LanPING\base_config_de #
#                    bug\Obj\ --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=ARM7TDMI   #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Norma #
#                    l.h" -I E:\PROJECTs\ARM\ESL_LanPING\startups\ -I         #
#                    E:\PROJECTs\ARM\ESL_LanPING\startups\at91sam7s32\ -I     #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\ -I                  #
#                    E:\PROJECTs\ARM\ESL_LanPING\Sources\uip\ -I "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.4\arm\INC\"       #
#                    --interwork --cpu_mode arm -On                           #
#    List file    =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\List\CP220 #
#                    0.lst                                                    #
#    Object file  =  E:\PROJECTs\ARM\ESL_LanPING\base_config_debug\Obj\CP2200 #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\PROJECTs\ARM\ESL_LanPING\Sources\CP2200.c
      1          /*
      2          	CP2200 driver for uIP TCP/IP Stack S.Perzborn [14.03.2007]
      3           * ----------------------------------------------------------------------------
      4           * ----------------------------------------------------------------------------
      5           *
      6           */
      7          
      8          #include "main.h"
      9          //#include <intrinsics.h>
     10          #include "CP2200.h"
     11          #include "uip.h"
     12          #include "uip_arp.h" 
     13          //#include "AT91SAM7S32.h"
     14          
     15           
     16          void write_CP2200(int adr, char value);
     17          char read_CP2200(int adr);
     18          void Init_CP2000(void);
     19          static void cpWriteMac(char adr,int value);
     20          extern unsigned char setting_buf[SETTING_BUF_SIZE];
     21          #define ON 1
     22          #define OFF 0
     23          //extern void Led (char stat);

   \                                 In section .bss, align 4
     24          struct uip_eth_addr eaddr;
   \                     eaddr:
   \   00000000                      DS8 8
     25          void network_device_init(void);
     26          u16_t network_device_read(void);
     27          void network_device_send(void);
     28          
     29          //#include "USART.h"
     30          
     31          extern void delay_ms( unsigned short delay);
     32          

   \                                 In section .bss, align 1
     33          static char CP2200_status=0;
   \                     CP2200_status:
   \   00000000                      DS8 1
     34          /*
     35           void itohex(char *hexstr, int dez, char length)
     36          {
     37          	char i=0;
     38          	char tmp=0;
     39          	if (length > 3)
     40          	{
     41          		tmp=(dez & 0xF000) >> 12;
     42          		if (tmp > 9)
     43          			hexstr[(int)i] = tmp + 'A' - 10;
     44          		else
     45          			hexstr[(int)i] = tmp + '0';
     46          		i++;
     47          	}
     48          	if (length > 2)
     49          	{
     50          		tmp=(dez & 0x0F00) >> 8;
     51          		if (tmp > 9)
     52          			hexstr[(int)i] = tmp + 'A' - 10;
     53          		else
     54          			hexstr[(int)i] = tmp + '0';
     55          		i++;
     56          	}
     57          	if (length > 1)
     58          	{
     59          		tmp=(dez & 0x00F0) >> 4;
     60          		if (tmp > 9)
     61          			hexstr[(int)i] = tmp + 'A' - 10;		
     62          		else
     63          			hexstr[(int)i] = tmp + '0';
     64          			
     65          		i++;
     66          	}
     67          	if (length > 0)
     68          	{
     69          		tmp=dez & 0x000F;
     70          		if (tmp > 9)
     71          			hexstr[(int)i] = tmp + 'A' - 10;			
     72          		else
     73          			hexstr[(int)i] = tmp + '0';
     74          		i++;
     75          	} 
     76          	hexstr[(int)i]=0;
     77          }
     78          */
     79          // ---------------------------------------------
     80          /*
     81          unsigned char CP2200_ReadTXBuffer(unsigned int addr)
     82          {
     83          	write_CP2200(RAMADDRL,addr & 0xFF); 
     84          	write_CP2200(RAMADDRH,addr >> 8); 
     85          	return (read_CP2200(RAMTXDATA));
     86          }
     87          */
     88          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     89          void CP2200_WriteTXBuffer(unsigned int addr, unsigned char value)
     90          {
   \                     CP2200_WriteTXBuffer:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     91          	write_CP2200(RAMADDRL,addr & 0xFF); 
   \   0000000C   0410B0E1           MOVS     R1,R4
   \   00000010   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000014   0900A0E3           MOV      R0,#+9
   \   00000018   ........           BL       write_CP2200
     92          	write_CP2200(RAMADDRH,addr >> 8); 
   \   0000001C   2414B0E1           LSRS     R1,R4,#+8
   \   00000020   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000024   0800A0E3           MOV      R0,#+8
   \   00000028   ........           BL       write_CP2200
     93          	write_CP2200(RAMTXDATA,value); 
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000034   0400A0E3           MOV      R0,#+4
   \   00000038   ........           BL       write_CP2200
     94          }
   \   0000003C   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return
     95          
     96          // ---------------------------------------------
     97          /*
     98          unsigned char CP2200_ReadRXBuffer(unsigned int addr)
     99          {
    100          	write_CP2200(RAMADDRL, (char) (addr & 0xFF)); 
    101          	write_CP2200(RAMADDRH,(char) (addr >> 8)); 
    102          	return (read_CP2200(RAMRXDATA));
    103          }
    104          */
    105          // ---------------------------------------------
    106          /*
    107          void CP2200_WriteRXBuffer(unsigned int addr, unsigned char value)
    108          {
    109          	write_CP2200(RAMADDRL,addr & 0xFF); 
    110          	write_CP2200(RAMADDRH,addr >> 8); 
    111          	write_CP2200(RAMRXDATA,value); 
    112          }
    113          */
    114          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    115          u16_t CP2200_ReadPacket(void)
    116          {
   \                     CP2200_ReadPacket:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
    117          	// uip_buf
    118          	// get packet len
    119          		u16_t packetlen;
    120          	u16_t i;
    121          	packetlen = read_CP2200(CPLENH);
   \   00000004   1F00A0E3           MOV      R0,#+31
   \   00000008   ........           BL       read_CP2200
   \   0000000C   0040B0E1           MOVS     R4,R0
    122          	packetlen = packetlen << 8;
   \   00000010   0444B0E1           LSLS     R4,R4,#+8
    123          	packetlen |= read_CP2200(CPLENL);
   \   00000014   2000A0E3           MOV      R0,#+32
   \   00000018   ........           BL       read_CP2200
   \   0000001C   040090E1           ORRS     R0,R0,R4
   \   00000020   0040B0E1           MOVS     R4,R0
    124          	for (i=0;i<packetlen;i++)
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   0050B0E1           MOVS     R5,R0
   \                     ??CP2200_ReadPacket_0:
   \   0000002C   0558A0E1           MOV      R5,R5, LSL #+16
   \   00000030   2558B0E1           MOVS     R5,R5, LSR #+16
   \   00000034   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000038   2448B0E1           MOVS     R4,R4, LSR #+16
   \   0000003C   040055E1           CMP      R5,R4
   \   00000040   0800002A           BCS      ??CP2200_ReadPacket_1
    125          	{
    126          		*(uip_buf+i) = read_CP2200(RXAUTORD);
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   ........           BL       read_CP2200
   \   0000004C   0510B0E1           MOVS     R1,R5
   \   00000050   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000054   2118B0E1           MOVS     R1,R1, LSR #+16
   \   00000058   ........           LDR      R2,??DataTable3  ;; uip_buf
   \   0000005C   0200C1E7           STRB     R0,[R1, +R2]
    127          	}
   \   00000060   015095E2           ADDS     R5,R5,#+1
   \   00000064   F0FFFFEA           B        ??CP2200_ReadPacket_0
    128          	return(packetlen);
   \                     ??CP2200_ReadPacket_1:
   \   00000068   0400B0E1           MOVS     R0,R4
   \   0000006C   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000070   2008B0E1           MOVS     R0,R0, LSR #+16
   \   00000074   3240BDE8           POP      {R1,R4,R5,LR}
   \   00000078   1EFF2FE1           BX       LR               ;; return
    129          }
    130          
    131          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    132          u16_t network_device_read(void)
    133          {
   \                     network_device_read:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
    134          	u16_t  packetlen=0;
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   0040B0E1           MOVS     R4,R0
    135          	int cp_bufptr; // Zeiger auf Paket Puffer
    136          	CP2200_status = read_CP2200(CP2200_INT0);
   \   0000000C   6300A0E3           MOV      R0,#+99
   \   00000010   ........           BL       read_CP2200
   \   00000014   9C109FE5           LDR      R1,??network_device_read_0  ;; CP2200_status
   \   00000018   0000C1E5           STRB     R0,[R1, #+0]
    137          	if ((CP2200_status & 0x02) == 0x02)
   \   0000001C   94009FE5           LDR      R0,??network_device_read_0  ;; CP2200_status
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   020010E3           TST      R0,#0x2
   \   00000028   0500000A           BEQ      ??network_device_read_1
    138          	{
    139          		//uart0_puts("CP2200 buffer full device read\r\n");	
    140          		write_CP2200(RXCN,0x01);
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   1100A0E3           MOV      R0,#+17
   \   00000034   ........           BL       write_CP2200
    141          		write_CP2200(RXCN,0x00);
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   1100A0E3           MOV      R0,#+17
   \   00000040   ........           BL       write_CP2200
    142          	}
    143          	CP2200_status=0;
   \                     ??network_device_read_1:
   \   00000044   6C009FE5           LDR      R0,??network_device_read_0  ;; CP2200_status
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   0010C0E5           STRB     R1,[R0, #+0]
    144          	// Paket im Empfangspuffer?
    145          	if (((read_CP2200(CPINFOH) &0x80) != 0) && (read_CP2200(CPINFOL) &0x80) != 0)
   \   00000050   1D00A0E3           MOV      R0,#+29
   \   00000054   ........           BL       read_CP2200
   \   00000058   800010E3           TST      R0,#0x80
   \   0000005C   1000000A           BEQ      ??network_device_read_2
   \   00000060   1E00A0E3           MOV      R0,#+30
   \   00000064   ........           BL       read_CP2200
   \   00000068   800010E3           TST      R0,#0x80
   \   0000006C   0C00000A           BEQ      ??network_device_read_2
    146          	{
    147          		//PORTD &= ~(1<<PD6); // set PB0 = LED OFF
    148          		
    149          		// Zeiger auf Paket Puffer merken
    150          		cp_bufptr = read_CP2200(RXFIFOHEADH);
   \   00000070   1700A0E3           MOV      R0,#+23
   \   00000074   ........           BL       read_CP2200
   \   00000078   0050B0E1           MOVS     R5,R0
    151          		cp_bufptr = cp_bufptr << 8;
   \   0000007C   0554B0E1           LSLS     R5,R5,#+8
    152          		cp_bufptr |= read_CP2200(RXFIFOHEADL);
   \   00000080   1800A0E3           MOV      R0,#+24
   \   00000084   ........           BL       read_CP2200
   \   00000088   050090E1           ORRS     R0,R0,R5
   \   0000008C   0050B0E1           MOVS     R5,R0
    153          	
    154          		packetlen = CP2200_ReadPacket();
   \   00000090   ........           BL       CP2200_ReadPacket
   \   00000094   0040B0E1           MOVS     R4,R0
    155          		write_CP2200(RXCN,0x06); // discharge package
   \   00000098   0610A0E3           MOV      R1,#+6
   \   0000009C   1100A0E3           MOV      R0,#+17
   \   000000A0   ........           BL       write_CP2200
    156          
    157          		//	write_CP2200(RXCN,0x04); // discharge package
    158          	}
    159          	return(packetlen);
   \                     ??network_device_read_2:
   \   000000A4   0400B0E1           MOVS     R0,R4
   \   000000A8   0008A0E1           MOV      R0,R0, LSL #+16
   \   000000AC   2008B0E1           MOVS     R0,R0, LSR #+16
   \   000000B0   3240BDE8           POP      {R1,R4,R5,LR}
   \   000000B4   1EFF2FE1           BX       LR               ;; return
   \                     ??network_device_read_0:
   \   000000B8   ........           DC32     CP2200_status
    160          }
    161          
    162          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    163          void CP2200_WritePacket(void)
    164          {
   \                     CP2200_WritePacket:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
    165          	//unsigned int len;
    166          	unsigned int addr;
    167          	unsigned int t;
    168          	// wait for previous packet complete
    169          	while (read_CP2200(TXBUSY) != 0x00);
   \                     ??CP2200_WritePacket_0:
   \   00000004   5400A0E3           MOV      R0,#+84
   \   00000008   ........           BL       read_CP2200
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   FBFFFF1A           BNE      ??CP2200_WritePacket_0
    170          	// set transmit buffer pointer
    171          	write_CP2200(TXSTARTH,0x00);
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   5900A0E3           MOV      R0,#+89
   \   0000001C   ........           BL       write_CP2200
    172          	write_CP2200(TXSTARTL,0x00);
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   5A00A0E3           MOV      R0,#+90
   \   00000028   ........           BL       write_CP2200
    173          	
    174          	//hwsend(&uip_buf[0], UIP_LLH_LEN);
    175          	addr=0;
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0040B0E1           MOVS     R4,R0
    176          	for (t=0;t < UIP_LLH_LEN;t++)
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0050B0E1           MOVS     R5,R0
   \                     ??CP2200_WritePacket_1:
   \   0000003C   0E0055E3           CMP      R5,#+14
   \   00000040   0600002A           BCS      ??CP2200_WritePacket_2
    177          	{
    178          		CP2200_WriteTXBuffer(addr++, *(uip_buf + t));
   \   00000044   ........           LDR      R0,??DataTable3  ;; uip_buf
   \   00000048   0010D5E7           LDRB     R1,[R5, +R0]
   \   0000004C   0400B0E1           MOVS     R0,R4
   \   00000050   ........           BL       CP2200_WriteTXBuffer
   \   00000054   014094E2           ADDS     R4,R4,#+1
    179          	}
   \   00000058   015095E2           ADDS     R5,R5,#+1
   \   0000005C   F6FFFFEA           B        ??CP2200_WritePacket_1
    180          
    181          	if(uip_len <= UIP_LLH_LEN + UIP_TCPIP_HLEN)
   \                     ??CP2200_WritePacket_2:
   \   00000060   F4009FE5           LDR      R0,??CP2200_WritePacket_3  ;; uip_len
   \   00000064   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000068   370050E3           CMP      R0,#+55
   \   0000006C   0D00002A           BCS      ??CP2200_WritePacket_4
    182          	{
    183          
    184          		//hwsend(&uip_buf[UIP_LLH_LEN], uip_len - UIP_LLH_LEN);
    185          		for (t=UIP_LLH_LEN;t < uip_len;t++)
   \   00000070   0E00A0E3           MOV      R0,#+14
   \   00000074   0050B0E1           MOVS     R5,R0
   \                     ??CP2200_WritePacket_5:
   \   00000078   DC009FE5           LDR      R0,??CP2200_WritePacket_3  ;; uip_len
   \   0000007C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000080   000055E1           CMP      R5,R0
   \   00000084   0600002A           BCS      ??CP2200_WritePacket_6
    186          		{
    187          			CP2200_WriteTXBuffer(addr++, *(uip_buf + t));
   \   00000088   ........           LDR      R0,??DataTable3  ;; uip_buf
   \   0000008C   0010D5E7           LDRB     R1,[R5, +R0]
   \   00000090   0400B0E1           MOVS     R0,R4
   \   00000094   ........           BL       CP2200_WriteTXBuffer
   \   00000098   014094E2           ADDS     R4,R4,#+1
    188          		}
   \   0000009C   015095E2           ADDS     R5,R5,#+1
   \   000000A0   F4FFFFEA           B        ??CP2200_WritePacket_5
    189          	}
   \                     ??CP2200_WritePacket_6:
   \   000000A4   190000EA           B        ??CP2200_WritePacket_7
    190          	else
    191          	{
    192          		//hwsend(&uip_buf[UIP_LLH_LEN], UIP_TCPIP_HLEN);
    193          		for (t=UIP_LLH_LEN;t < UIP_TCPIP_HLEN+UIP_LLH_LEN;t++)
   \                     ??CP2200_WritePacket_4:
   \   000000A8   0E00A0E3           MOV      R0,#+14
   \   000000AC   0050B0E1           MOVS     R5,R0
   \                     ??CP2200_WritePacket_8:
   \   000000B0   360055E3           CMP      R5,#+54
   \   000000B4   0600002A           BCS      ??CP2200_WritePacket_9
    194          		{
    195          			CP2200_WriteTXBuffer(addr++, *(uip_buf + t));
   \   000000B8   ........           LDR      R0,??DataTable3  ;; uip_buf
   \   000000BC   0010D5E7           LDRB     R1,[R5, +R0]
   \   000000C0   0400B0E1           MOVS     R0,R4
   \   000000C4   ........           BL       CP2200_WriteTXBuffer
   \   000000C8   014094E2           ADDS     R4,R4,#+1
    196          		}
   \   000000CC   015095E2           ADDS     R5,R5,#+1
   \   000000D0   F6FFFFEA           B        ??CP2200_WritePacket_8
    197          		//hwsend(uip_appdata, uip_len - UIP_TCPIP_HLEN - UIP_LLH_LEN);
    198          		for (t=0;t < ((uip_len - UIP_TCPIP_HLEN - UIP_LLH_LEN)+1);t++)
   \                     ??CP2200_WritePacket_9:
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   0050B0E1           MOVS     R5,R0
   \                     ??CP2200_WritePacket_10:
   \   000000DC   78009FE5           LDR      R0,??CP2200_WritePacket_3  ;; uip_len
   \   000000E0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000E4   350050E2           SUBS     R0,R0,#+53
   \   000000E8   000055E1           CMP      R5,R0
   \   000000EC   0700002A           BCS      ??CP2200_WritePacket_11
    199          		{
    200          			CP2200_WriteTXBuffer(addr++, *(((unsigned char *)uip_appdata) + t));
   \   000000F0   68009FE5           LDR      R0,??CP2200_WritePacket_3+0x4  ;; uip_appdata
   \   000000F4   000090E5           LDR      R0,[R0, #+0]
   \   000000F8   0010D5E7           LDRB     R1,[R5, +R0]
   \   000000FC   0400B0E1           MOVS     R0,R4
   \   00000100   ........           BL       CP2200_WriteTXBuffer
   \   00000104   014094E2           ADDS     R4,R4,#+1
    201          		}
   \   00000108   015095E2           ADDS     R5,R5,#+1
   \   0000010C   F2FFFFEA           B        ??CP2200_WritePacket_10
    202          	}
    203          //  for (addr=0;addr<uip_len;addr++)
    204          //	{
    205          //		CP2200_WriteTXBuffer(addr, *(uip_buf + addr));
    206          //	}
    207          	
    208          	// set packet end
    209          	//write_CP2200(TXENDH,(char) (uip_len >> 8));
    210          	//write_CP2200(TXENDL,(char) (uip_len & 0xFF));
    211          	write_CP2200(TXENDH,(char) (addr >> 8));
   \                     ??CP2200_WritePacket_11:
   \                     ??CP2200_WritePacket_7:
   \   00000110   2414B0E1           LSRS     R1,R4,#+8
   \   00000114   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000118   5700A0E3           MOV      R0,#+87
   \   0000011C   ........           BL       write_CP2200
    212          	write_CP2200(TXENDL,(char) (addr & 0xFF));
   \   00000120   0410B0E1           MOVS     R1,R4
   \   00000124   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000128   5800A0E3           MOV      R0,#+88
   \   0000012C   ........           BL       write_CP2200
    213          	// set packet start
    214          	write_CP2200(TXSTARTH,0x00);
   \   00000130   0010A0E3           MOV      R1,#+0
   \   00000134   5900A0E3           MOV      R0,#+89
   \   00000138   ........           BL       write_CP2200
    215          	write_CP2200(TXSTARTL,0x00);
   \   0000013C   0010A0E3           MOV      R1,#+0
   \   00000140   5A00A0E3           MOV      R0,#+90
   \   00000144   ........           BL       write_CP2200
    216          	write_CP2200(TXCN,0x01); // send packet
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   5300A0E3           MOV      R0,#+83
   \   00000150   ........           BL       write_CP2200
    217          	//uart_puts_P(PSTR("[sp] "));	
    218          }
   \   00000154   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000158   1EFF2FE1           BX       LR               ;; return
   \                     ??CP2200_WritePacket_3:
   \   0000015C   ........           DC32     uip_len
   \   00000160   ........           DC32     uip_appdata
    219          
    220          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    221          void network_device_send(void)
    222          {
   \                     network_device_send:
   \   00000000   00502DE9           PUSH     {R12,LR}
    223          	CP2200_WritePacket();
   \   00000004   ........           BL       CP2200_WritePacket
    224          }
   \   00000008   0140BDE8           POP      {R0,LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    225          
    226          
    227          
    228          

   \                                 In section .text, align 4, keep-with-next
    229          void write_CP2200(int adr,char value)
    230          {        
    231                 unsigned char tmp;
    232                  //AT91C_BASE_PIOA->PIO_CODR |= CS;
    233                 
    234                  AT91C_BASE_PIOA->PIO_OER |= (D0|D1|D2|D3|D4|D5|D6|D7);
   \                     write_CP2200:
   \   00000000   EF30E0E3           MVN      R3,#+239
   \   00000004   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000008   003093E5           LDR      R3,[R3, #+0]
   \   0000000C   40C9A0E3           MOV      R12,#+1048576
   \   00000010   FECA8CE3           ORR      R12,R12,#0xFE000
   \   00000014   03309CE1           ORRS     R3,R12,R3
   \   00000018   EFC0E0E3           MVN      R12,#+239
   \   0000001C   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000020   00308CE5           STR      R3,[R12, #+0]
    235          	AT91C_BASE_PIOA->PIO_SODR |= ALE; // set ALE 
   \   00000024   CF30E0E3           MVN      R3,#+207
   \   00000028   B03EC3E3           BIC      R3,R3,#0xB00
   \   0000002C   003093E5           LDR      R3,[R3, #+0]
   \   00000030   803093E3           ORRS     R3,R3,#0x80
   \   00000034   CFC0E0E3           MVN      R12,#+207
   \   00000038   B0CECCE3           BIC      R12,R12,#0xB00
   \   0000003C   00308CE5           STR      R3,[R12, #+0]
    236                  
    237          
    238                  AT91C_BASE_PIOA->PIO_SODR |= (adr << D0_); // output address
   \   00000040   CF30E0E3           MVN      R3,#+207
   \   00000044   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000048   003093E5           LDR      R3,[R3, #+0]
   \   0000004C   803693E1           ORRS     R3,R3,R0, LSL #+13
   \   00000050   CFC0E0E3           MVN      R12,#+207
   \   00000054   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000058   00308CE5           STR      R3,[R12, #+0]
    239                  adr ^= 0xFF;
   \   0000005C   FF0030E2           EORS     R0,R0,#0xFF
    240                  AT91C_BASE_PIOA->PIO_CODR |=  (adr << D0_); // output address
   \   00000060   CB30E0E3           MVN      R3,#+203
   \   00000064   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000068   003093E5           LDR      R3,[R3, #+0]
   \   0000006C   803693E1           ORRS     R3,R3,R0, LSL #+13
   \   00000070   CBC0E0E3           MVN      R12,#+203
   \   00000074   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000078   00308CE5           STR      R3,[R12, #+0]
    241                  
    242          	AT91C_BASE_PIOA->PIO_CODR |= ALE; // clear ALE
   \   0000007C   CB30E0E3           MVN      R3,#+203
   \   00000080   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000084   003093E5           LDR      R3,[R3, #+0]
   \   00000088   803093E3           ORRS     R3,R3,#0x80
   \   0000008C   CBC0E0E3           MVN      R12,#+203
   \   00000090   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000094   00308CE5           STR      R3,[R12, #+0]
    243                  
    244          	AT91C_BASE_PIOA->PIO_CODR |= WR; // clear WR#
   \   00000098   CB30E0E3           MVN      R3,#+203
   \   0000009C   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000A0   003093E5           LDR      R3,[R3, #+0]
   \   000000A4   803E93E3           ORRS     R3,R3,#0x800
   \   000000A8   CBC0E0E3           MVN      R12,#+203
   \   000000AC   B0CECCE3           BIC      R12,R12,#0xB00
   \   000000B0   00308CE5           STR      R3,[R12, #+0]
    245                  
    246          	tmp = value;
   \   000000B4   0120B0E1           MOVS     R2,R1
    247          	AT91C_BASE_PIOA->PIO_SODR |= (tmp << D0_); // output address
   \   000000B8   CF30E0E3           MVN      R3,#+207
   \   000000BC   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000C0   003093E5           LDR      R3,[R3, #+0]
   \   000000C4   02C0B0E1           MOVS     R12,R2
   \   000000C8   FFC01CE2           ANDS     R12,R12,#0xFF    ;; Zero extend
   \   000000CC   8C3693E1           ORRS     R3,R3,R12, LSL #+13
   \   000000D0   CFC0E0E3           MVN      R12,#+207
   \   000000D4   B0CECCE3           BIC      R12,R12,#0xB00
   \   000000D8   00308CE5           STR      R3,[R12, #+0]
    248                  tmp ^= 0xFF;
   \   000000DC   FF2032E2           EORS     R2,R2,#0xFF
    249                  AT91C_BASE_PIOA->PIO_CODR |= (tmp << D0_); // output address
   \   000000E0   CB30E0E3           MVN      R3,#+203
   \   000000E4   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000E8   003093E5           LDR      R3,[R3, #+0]
   \   000000EC   02C0B0E1           MOVS     R12,R2
   \   000000F0   FFC01CE2           ANDS     R12,R12,#0xFF    ;; Zero extend
   \   000000F4   8C3693E1           ORRS     R3,R3,R12, LSL #+13
   \   000000F8   CBC0E0E3           MVN      R12,#+203
   \   000000FC   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000100   00308CE5           STR      R3,[R12, #+0]
    250                  
    251          	AT91C_BASE_PIOA->PIO_SODR |= WR;  // set WR#
   \   00000104   CF30E0E3           MVN      R3,#+207
   \   00000108   B03EC3E3           BIC      R3,R3,#0xB00
   \   0000010C   003093E5           LDR      R3,[R3, #+0]
   \   00000110   803E93E3           ORRS     R3,R3,#0x800
   \   00000114   CFC0E0E3           MVN      R12,#+207
   \   00000118   B0CECCE3           BIC      R12,R12,#0xB00
   \   0000011C   00308CE5           STR      R3,[R12, #+0]
    252                  
    253          	tmp = value;
   \   00000120   0120B0E1           MOVS     R2,R1
    254          	AT91C_BASE_PIOA->PIO_SODR |= (tmp << D0_); // output address
   \   00000124   CF30E0E3           MVN      R3,#+207
   \   00000128   B03EC3E3           BIC      R3,R3,#0xB00
   \   0000012C   003093E5           LDR      R3,[R3, #+0]
   \   00000130   02C0B0E1           MOVS     R12,R2
   \   00000134   FFC01CE2           ANDS     R12,R12,#0xFF    ;; Zero extend
   \   00000138   8C3693E1           ORRS     R3,R3,R12, LSL #+13
   \   0000013C   CFC0E0E3           MVN      R12,#+207
   \   00000140   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000144   00308CE5           STR      R3,[R12, #+0]
    255                  tmp ^= 0xFF;
   \   00000148   FF2032E2           EORS     R2,R2,#0xFF
    256                  AT91C_BASE_PIOA->PIO_CODR |= (tmp << D0_); // output address
   \   0000014C   CB30E0E3           MVN      R3,#+203
   \   00000150   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000154   003093E5           LDR      R3,[R3, #+0]
   \   00000158   02C0B0E1           MOVS     R12,R2
   \   0000015C   FFC01CE2           ANDS     R12,R12,#0xFF    ;; Zero extend
   \   00000160   8C3693E1           ORRS     R3,R3,R12, LSL #+13
   \   00000164   CBC0E0E3           MVN      R12,#+203
   \   00000168   B0CECCE3           BIC      R12,R12,#0xB00
   \   0000016C   00308CE5           STR      R3,[R12, #+0]
    257                  
    258                 // AT91C_BASE_PIOA->PIO_SODR |= CS;
    259          
    260          }
   \   00000170   1EFF2FE1           BX       LR               ;; return
    261          
    262          

   \                                 In section .text, align 4, keep-with-next
    263          char read_CP2200(int adr)
    264          {
   \                     read_CP2200:
   \   00000000   0010B0E1           MOVS     R1,R0
    265          	unsigned char value;
    266                  unsigned int tmp;
    267                  
    268                 // AT91C_BASE_PIOA->PIO_CODR |= CS;
    269                  
    270                  AT91C_BASE_PIOA->PIO_OER = (D0|D1|D2|D3|D4|D5|D6|D7);
   \   00000004   EF30E0E3           MVN      R3,#+239
   \   00000008   B03EC3E3           BIC      R3,R3,#0xB00
   \   0000000C   40C9A0E3           MOV      R12,#+1048576
   \   00000010   FECA8CE3           ORR      R12,R12,#0xFE000
   \   00000014   00C083E5           STR      R12,[R3, #+0]
    271          	AT91C_BASE_PIOA->PIO_SODR = ALE; // set ALE
   \   00000018   CF30E0E3           MVN      R3,#+207
   \   0000001C   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000020   80C0A0E3           MOV      R12,#+128
   \   00000024   00C083E5           STR      R12,[R3, #+0]
    272                  
    273                  tmp = adr;   
   \   00000028   0120B0E1           MOVS     R2,R1
    274          	AT91C_BASE_PIOA->PIO_SODR = (tmp << D0_); // output address
   \   0000002C   8236B0E1           LSLS     R3,R2,#+13
   \   00000030   CFC0E0E3           MVN      R12,#+207
   \   00000034   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000038   00308CE5           STR      R3,[R12, #+0]
    275                  tmp ^= 0xFF;
   \   0000003C   FF2032E2           EORS     R2,R2,#0xFF
    276                  AT91C_BASE_PIOA->PIO_CODR = (tmp << D0_); // output address
   \   00000040   8236B0E1           LSLS     R3,R2,#+13
   \   00000044   CBC0E0E3           MVN      R12,#+203
   \   00000048   B0CECCE3           BIC      R12,R12,#0xB00
   \   0000004C   00308CE5           STR      R3,[R12, #+0]
    277                  
    278          	AT91C_BASE_PIOA->PIO_CODR = ALE;; // clear ALE
   \   00000050   CB30E0E3           MVN      R3,#+203
   \   00000054   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000058   80C0A0E3           MOV      R12,#+128
   \   0000005C   00C083E5           STR      R12,[R3, #+0]
    279                  
    280                  tmp = adr; 
   \   00000060   0120B0E1           MOVS     R2,R1
    281          	AT91C_BASE_PIOA->PIO_SODR = (tmp << D0_); // output address
   \   00000064   8236B0E1           LSLS     R3,R2,#+13
   \   00000068   CFC0E0E3           MVN      R12,#+207
   \   0000006C   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000070   00308CE5           STR      R3,[R12, #+0]
    282                  tmp ^= 0xFF;
   \   00000074   FF2032E2           EORS     R2,R2,#0xFF
    283                  AT91C_BASE_PIOA->PIO_CODR = (tmp << D0_); // output address
   \   00000078   8236B0E1           LSLS     R3,R2,#+13
   \   0000007C   CBC0E0E3           MVN      R12,#+203
   \   00000080   B0CECCE3           BIC      R12,R12,#0xB00
   \   00000084   00308CE5           STR      R3,[R12, #+0]
    284                  
    285          	AT91C_BASE_PIOA->PIO_CODR = RD; // clear RD#
   \   00000088   CB30E0E3           MVN      R3,#+203
   \   0000008C   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000090   40CDA0E3           MOV      R12,#+4096
   \   00000094   00C083E5           STR      R12,[R3, #+0]
    286                  AT91C_BASE_PIOA->PIO_ODR = (D0|D1|D2|D3|D4|D5|D6|D7);
   \   00000098   EB30E0E3           MVN      R3,#+235
   \   0000009C   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000A0   40C9A0E3           MOV      R12,#+1048576
   \   000000A4   FECA8CE3           ORR      R12,R12,#0xFE000
   \   000000A8   00C083E5           STR      R12,[R3, #+0]
    287          	value = (AT91C_BASE_PIOA->PIO_PDSR >> D0_); // Waitstate
   \   000000AC   C330E0E3           MVN      R3,#+195
   \   000000B0   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000B4   003093E5           LDR      R3,[R3, #+0]
   \   000000B8   A336B0E1           LSRS     R3,R3,#+13
   \   000000BC   0300B0E1           MOVS     R0,R3
    288          	value = (AT91C_BASE_PIOA->PIO_PDSR >> D0_); // Waitstate
   \   000000C0   C330E0E3           MVN      R3,#+195
   \   000000C4   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000C8   003093E5           LDR      R3,[R3, #+0]
   \   000000CC   A336B0E1           LSRS     R3,R3,#+13
   \   000000D0   0300B0E1           MOVS     R0,R3
    289          	value = (AT91C_BASE_PIOA->PIO_PDSR >> D0_); // Waitstate
   \   000000D4   C330E0E3           MVN      R3,#+195
   \   000000D8   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000DC   003093E5           LDR      R3,[R3, #+0]
   \   000000E0   A336B0E1           LSRS     R3,R3,#+13
   \   000000E4   0300B0E1           MOVS     R0,R3
    290          	value = (AT91C_BASE_PIOA->PIO_PDSR >> D0_); // Waitstate
   \   000000E8   C330E0E3           MVN      R3,#+195
   \   000000EC   B03EC3E3           BIC      R3,R3,#0xB00
   \   000000F0   003093E5           LDR      R3,[R3, #+0]
   \   000000F4   A336B0E1           LSRS     R3,R3,#+13
   \   000000F8   0300B0E1           MOVS     R0,R3
    291          	value = (AT91C_BASE_PIOA->PIO_PDSR >> D0_); // input D0..7
   \   000000FC   C330E0E3           MVN      R3,#+195
   \   00000100   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000104   003093E5           LDR      R3,[R3, #+0]
   \   00000108   A336B0E1           LSRS     R3,R3,#+13
   \   0000010C   0300B0E1           MOVS     R0,R3
    292          	AT91C_BASE_PIOA->PIO_SODR = RD; // set RD#
   \   00000110   CF30E0E3           MVN      R3,#+207
   \   00000114   B03EC3E3           BIC      R3,R3,#0xB00
   \   00000118   40CDA0E3           MOV      R12,#+4096
   \   0000011C   00C083E5           STR      R12,[R3, #+0]
    293                  
    294                 // AT91C_BASE_PIOA->PIO_SODR |= CS;
    295                  
    296          	return(value);
   \   00000120   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000124   1EFF2FE1           BX       LR               ;; return
    297          }
    298          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    299          void network_device_init(void)
    300          {
   \                     network_device_init:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    301          	//char hexstr[10];
    302          	uip_ipaddr_t ipaddr;
    303          	//struct uip_eth_addr eaddr;
    304          	unsigned int i;
    305          	
    306          	Init_CP2000();
   \   00000008   ........           BL       Init_CP2000
    307          //#ifndef DBG_BORD
    308          	// own mac address (get from CP2200 flash memory)
    309          	write_CP2200(FLASHADDRL,0xFA);
   \   0000000C   FA10A0E3           MOV      R1,#+250
   \   00000010   6800A0E3           MOV      R0,#+104
   \   00000014   ........           BL       write_CP2200
    310          	write_CP2200(FLASHADDRH,0x1F);
   \   00000018   1F10A0E3           MOV      R1,#+31
   \   0000001C   6900A0E3           MOV      R0,#+105
   \   00000020   ........           BL       write_CP2200
    311          	//uart0_puts("\nMAC:");
    312          	for (i=0;i<6;i++)
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   0040B0E1           MOVS     R4,R0
   \                     ??network_device_init_0:
   \   0000002C   060054E3           CMP      R4,#+6
   \   00000030   0500002A           BCS      ??network_device_init_1
    313          	{
    314          		eaddr.addr[i]=read_CP2200(FLASHAUTORD); // mac address from CP2200 
   \   00000034   0500A0E3           MOV      R0,#+5
   \   00000038   ........           BL       read_CP2200
   \   0000003C   00119FE5           LDR      R1,??network_device_init_2  ;; eaddr
   \   00000040   0100C4E7           STRB     R0,[R4, +R1]
    315          		//itohex(hexstr,eaddr.addr[i] , 2);
    316          		//uart0_puts(hexstr);
    317          		
    318          	}
   \   00000044   014094E2           ADDS     R4,R4,#+1
   \   00000048   F7FFFFEA           B        ??network_device_init_0
    319          	//uart0_puts("\n");
    320          //#else
    321          //        eaddr.addr[0] = 0x00;
    322          //        eaddr.addr[1] = 0x16;
    323          //        eaddr.addr[2] = 0xD4;
    324          //        eaddr.addr[3] = 0x65;
    325          //        eaddr.addr[4] = 0xE8;
    326          //        eaddr.addr[5] = 0x11;
    327          //#endif
    328                  // set mac address of this modules
    329              uip_setethaddr(eaddr);
   \                     ??network_device_init_1:
   \   0000004C   F4009FE5           LDR      R0,??network_device_init_2+0x4  ;; uip_ethaddr
   \   00000050   EC109FE5           LDR      R1,??network_device_init_2  ;; eaddr
   \   00000054   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000058   0010C0E5           STRB     R1,[R0, #+0]
   \   0000005C   E8009FE5           LDR      R0,??network_device_init_2+0x8  ;; uip_ethaddr + 1
   \   00000060   E8109FE5           LDR      R1,??network_device_init_2+0xC  ;; eaddr + 1
   \   00000064   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000068   0010C0E5           STRB     R1,[R0, #+0]
   \   0000006C   E0009FE5           LDR      R0,??network_device_init_2+0x10  ;; uip_ethaddr + 2
   \   00000070   E0109FE5           LDR      R1,??network_device_init_2+0x14  ;; eaddr + 2
   \   00000074   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000078   0010C0E5           STRB     R1,[R0, #+0]
   \   0000007C   D8009FE5           LDR      R0,??network_device_init_2+0x18  ;; uip_ethaddr + 3
   \   00000080   D8109FE5           LDR      R1,??network_device_init_2+0x1C  ;; eaddr + 3
   \   00000084   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000088   0010C0E5           STRB     R1,[R0, #+0]
   \   0000008C   D0009FE5           LDR      R0,??network_device_init_2+0x20  ;; uip_ethaddr + 4
   \   00000090   D0109FE5           LDR      R1,??network_device_init_2+0x24  ;; eaddr + 4
   \   00000094   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000098   0010C0E5           STRB     R1,[R0, #+0]
   \   0000009C   C8009FE5           LDR      R0,??network_device_init_2+0x28  ;; uip_ethaddr + 5
   \   000000A0   C8109FE5           LDR      R1,??network_device_init_2+0x2C  ;; eaddr + 5
   \   000000A4   0010D1E5           LDRB     R1,[R1, #+0]
   \   000000A8   0010C0E5           STRB     R1,[R0, #+0]
    330          	// set netmask
    331          	//uip_ipaddr(ipaddr, MSKA,MSKB,MSKC,MSKD);
    332          	ipaddr[0] = SET->NetMask[0];
   \   000000AC   C0109FE5           LDR      R1,??network_device_init_2+0x30  ;; setting_buf + 24
   \   000000B0   B010D1E1           LDRH     R1,[R1, #+0]
   \   000000B4   B010CDE1           STRH     R1,[SP, #+0]
    333          	ipaddr[1] = SET->NetMask[1]; 
   \   000000B8   B8109FE5           LDR      R1,??network_device_init_2+0x34  ;; setting_buf + 26
   \   000000BC   B010D1E1           LDRH     R1,[R1, #+0]
   \   000000C0   B210CDE1           STRH     R1,[SP, #+2]
    334          	uip_setnetmask(ipaddr);
   \   000000C4   B0009FE5           LDR      R0,??network_device_init_2+0x38  ;; uip_netmask
   \   000000C8   B010DDE1           LDRH     R1,[SP, #+0]
   \   000000CC   B010C0E1           STRH     R1,[R0, #+0]
   \   000000D0   A8009FE5           LDR      R0,??network_device_init_2+0x3C  ;; uip_netmask + 2
   \   000000D4   B210DDE1           LDRH     R1,[SP, #+2]
   \   000000D8   B010C0E1           STRH     R1,[R0, #+0]
    335          	// set ip address of this module
    336              //    uip_ipaddr(ipaddr, IPA,IPB,IPC,IPD);
    337          	ipaddr[0] = SET->IPDev[0];
   \   000000DC   A0109FE5           LDR      R1,??network_device_init_2+0x40  ;; setting_buf + 20
   \   000000E0   B010D1E1           LDRH     R1,[R1, #+0]
   \   000000E4   B010CDE1           STRH     R1,[SP, #+0]
    338          	ipaddr[1] = SET->IPDev[1];
   \   000000E8   98109FE5           LDR      R1,??network_device_init_2+0x44  ;; setting_buf + 22
   \   000000EC   B010D1E1           LDRH     R1,[R1, #+0]
   \   000000F0   B210CDE1           STRH     R1,[SP, #+2]
    339          	uip_sethostaddr(ipaddr);
   \   000000F4   90009FE5           LDR      R0,??network_device_init_2+0x48  ;; uip_hostaddr
   \   000000F8   B010DDE1           LDRH     R1,[SP, #+0]
   \   000000FC   B010C0E1           STRH     R1,[R0, #+0]
   \   00000100   88009FE5           LDR      R0,??network_device_init_2+0x4C  ;; uip_hostaddr + 2
   \   00000104   B210DDE1           LDRH     R1,[SP, #+2]
   \   00000108   B010C0E1           STRH     R1,[R0, #+0]
    340          	// set gateway address (default router address)
    341          	//uip_ipaddr(ipaddr, GWA,GWB,GWC,GWD);
    342          	ipaddr[0] = SET->Geteway[0];
   \   0000010C   80109FE5           LDR      R1,??network_device_init_2+0x50  ;; setting_buf + 28
   \   00000110   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000114   B010CDE1           STRH     R1,[SP, #+0]
    343          	ipaddr[1] = SET->Geteway[1];
   \   00000118   78109FE5           LDR      R1,??network_device_init_2+0x54  ;; setting_buf + 30
   \   0000011C   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000120   B210CDE1           STRH     R1,[SP, #+2]
    344          	uip_setdraddr(ipaddr);
   \   00000124   70009FE5           LDR      R0,??network_device_init_2+0x58  ;; uip_draddr
   \   00000128   B010DDE1           LDRH     R1,[SP, #+0]
   \   0000012C   B010C0E1           STRH     R1,[R0, #+0]
   \   00000130   68009FE5           LDR      R0,??network_device_init_2+0x5C  ;; uip_draddr + 2
   \   00000134   B210DDE1           LDRH     R1,[SP, #+2]
   \   00000138   B010C0E1           STRH     R1,[R0, #+0]
    345          }
   \   0000013C   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000140   1EFF2FE1           BX       LR               ;; return
   \                     ??network_device_init_2:
   \   00000144   ........           DC32     eaddr
   \   00000148   ........           DC32     uip_ethaddr
   \   0000014C   ........           DC32     uip_ethaddr + 1
   \   00000150   ........           DC32     eaddr + 1
   \   00000154   ........           DC32     uip_ethaddr + 2
   \   00000158   ........           DC32     eaddr + 2
   \   0000015C   ........           DC32     uip_ethaddr + 3
   \   00000160   ........           DC32     eaddr + 3
   \   00000164   ........           DC32     uip_ethaddr + 4
   \   00000168   ........           DC32     eaddr + 4
   \   0000016C   ........           DC32     uip_ethaddr + 5
   \   00000170   ........           DC32     eaddr + 5
   \   00000174   ........           DC32     setting_buf + 24
   \   00000178   ........           DC32     setting_buf + 26
   \   0000017C   ........           DC32     uip_netmask
   \   00000180   ........           DC32     uip_netmask + 2
   \   00000184   ........           DC32     setting_buf + 20
   \   00000188   ........           DC32     setting_buf + 22
   \   0000018C   ........           DC32     uip_hostaddr
   \   00000190   ........           DC32     uip_hostaddr + 2
   \   00000194   ........           DC32     setting_buf + 28
   \   00000198   ........           DC32     setting_buf + 30
   \   0000019C   ........           DC32     uip_draddr
   \   000001A0   ........           DC32     uip_draddr + 2
    346          
    347          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    348          void Init_CP2000(void)
    349          {
   \                     Init_CP2000:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
    350          	volatile unsigned char tmp;
    351          	unsigned int tmp16;
    352          	unsigned int timeout;
    353             AT91C_BASE_PIOA->PIO_CODR = (RES);
   \   00000004   CB00E0E3           MVN      R0,#+203
   \   00000008   B00EC0E3           BIC      R0,R0,#0xB00
   \   0000000C   8019A0E3           MOV      R1,#+2097152
   \   00000010   001080E5           STR      R1,[R0, #+0]
    354          	//uart0_puts("MAC_PHY reset on\r\n");
    355             delay_ms(200);
   \   00000014   C800A0E3           MOV      R0,#+200
   \   00000018   ........           BL       delay_ms
    356             AT91C_BASE_PIOA->PIO_SODR = (RES);
   \   0000001C   CF00E0E3           MVN      R0,#+207
   \   00000020   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000024   8019A0E3           MOV      R1,#+2097152
   \   00000028   001080E5           STR      R1,[R0, #+0]
    357             //uart0_puts("MAC_PHY reset\n");
    358               
    359                  
    360            //reset CP220x
    361            read_CP2200(CP2200_INT0); //clear CP2200 INT0
   \   0000002C   6300A0E3           MOV      R0,#+99
   \   00000030   ........           BL       read_CP2200
    362            write_CP2200(SWRST,4);
   \   00000034   0410A0E3           MOV      R1,#+4
   \   00000038   7500A0E3           MOV      R0,#+117
   \   0000003C   ........           BL       write_CP2200
    363            while (!(read_CP2200(CP2200_INT0)& 0x20)); //wait for reset complete
   \                     ??Init_CP2000_0:
   \   00000040   6300A0E3           MOV      R0,#+99
   \   00000044   ........           BL       read_CP2200
   \   00000048   200010E3           TST      R0,#0x20
   \   0000004C   FBFFFF0A           BEQ      ??Init_CP2000_0
    364          
    365            
    366          //PHY INIT
    367            write_CP2200(PHYCF,0xFE);
   \   00000050   FE10A0E3           MOV      R1,#+254
   \   00000054   7900A0E3           MOV      R0,#+121
   \   00000058   ........           BL       write_CP2200
    368            write_CP2200(PHYCN,0x00);
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   7800A0E3           MOV      R0,#+120
   \   00000064   ........           BL       write_CP2200
    369            delay_ms(1);
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   ........           BL       delay_ms
    370            read_CP2200(CP2200_INT1); 
   \   00000070   7F00A0E3           MOV      R0,#+127
   \   00000074   ........           BL       read_CP2200
    371            write_CP2200(PHYCN,0x80);
   \   00000078   8010A0E3           MOV      R1,#+128
   \   0000007C   7800A0E3           MOV      R0,#+120
   \   00000080   ........           BL       write_CP2200
    372           delay_ms(1);
   \   00000084   0100A0E3           MOV      R0,#+1
   \   00000088   ........           BL       delay_ms
    373            write_CP2200(PHYCN,0xE0);
   \   0000008C   E010A0E3           MOV      R1,#+224
   \   00000090   7800A0E3           MOV      R0,#+120
   \   00000094   ........           BL       write_CP2200
    374            delay_ms(75);
   \   00000098   4B00A0E3           MOV      R0,#+75
   \   0000009C   ........           BL       delay_ms
    375          	timeout=3000;
   \   000000A0   B800A0E3           MOV      R0,#+184
   \   000000A4   B00E80E3           ORR      R0,R0,#0xB00
   \   000000A8   0050B0E1           MOVS     R5,R0
    376            while ((!(read_CP2200(CP2200_INT1)& 0x01)) && (timeout > 0))
   \                     ??Init_CP2000_1:
   \   000000AC   7F00A0E3           MOV      R0,#+127
   \   000000B0   ........           BL       read_CP2200
   \   000000B4   010010E3           TST      R0,#0x1
   \   000000B8   0500001A           BNE      ??Init_CP2000_2
   \   000000BC   000055E3           CMP      R5,#+0
   \   000000C0   0300000A           BEQ      ??Init_CP2000_2
    377          	{
    378          		delay_ms(10);
   \   000000C4   0A00A0E3           MOV      R0,#+10
   \   000000C8   ........           BL       delay_ms
    379          		timeout--;
   \   000000CC   015055E2           SUBS     R5,R5,#+1
   \   000000D0   F5FFFFEA           B        ??Init_CP2000_1
    380          	}
    381          	if (timeout < 1)
   \                     ??Init_CP2000_2:
   \   000000D4   000055E3           CMP      R5,#+0
   \   000000D8   0000001A           BNE      ??Init_CP2000_3
    382          	{
    383          		//uart0_puts("timeout n1 er1\r\n");
    384                          while(1);
   \                     ??Init_CP2000_4:
   \   000000DC   FEFFFFEA           B        ??Init_CP2000_4
    385          	}
    386          	timeout=3000;
   \                     ??Init_CP2000_3:
   \   000000E0   B800A0E3           MOV      R0,#+184
   \   000000E4   B00E80E3           ORR      R0,R0,#0xB00
   \   000000E8   0050B0E1           MOVS     R5,R0
    387            while ((!(read_CP2200(PHYCN)& 0x01)) && (timeout > 0))
   \                     ??Init_CP2000_5:
   \   000000EC   7800A0E3           MOV      R0,#+120
   \   000000F0   ........           BL       read_CP2200
   \   000000F4   010010E3           TST      R0,#0x1
   \   000000F8   0500001A           BNE      ??Init_CP2000_6
   \   000000FC   000055E3           CMP      R5,#+0
   \   00000100   0300000A           BEQ      ??Init_CP2000_6
    388          	{
    389          		delay_ms(10);
   \   00000104   0A00A0E3           MOV      R0,#+10
   \   00000108   ........           BL       delay_ms
    390          	        timeout--;
   \   0000010C   015055E2           SUBS     R5,R5,#+1
   \   00000110   F5FFFFEA           B        ??Init_CP2000_5
    391          	}
    392          	if (timeout < 1)
   \                     ??Init_CP2000_6:
   \   00000114   000055E3           CMP      R5,#+0
   \   00000118   0000001A           BNE      ??Init_CP2000_7
    393          	{
    394          		//uart0_puts("timeout  n1 er2\r\n");
    395                          while(1);
   \                     ??Init_CP2000_8:
   \   0000011C   FEFFFFEA           B        ??Init_CP2000_8
    396          	}
    397          	//MAC INIT
    398            cpWriteMac(MACCF,0x40B3);
   \                     ??Init_CP2000_7:
   \   00000120   B310A0E3           MOV      R1,#+179
   \   00000124   401C81E3           ORR      R1,R1,#0x4000
   \   00000128   0100A0E3           MOV      R0,#+1
   \   0000012C   ........           BL       cpWriteMac
    399            cpWriteMac(IPGT,0x0015);
   \   00000130   1510A0E3           MOV      R1,#+21
   \   00000134   0200A0E3           MOV      R0,#+2
   \   00000138   ........           BL       cpWriteMac
    400            cpWriteMac(IPGR,0x0C12);
   \   0000013C   1210A0E3           MOV      R1,#+18
   \   00000140   C01E81E3           ORR      R1,R1,#0xC00
   \   00000144   0300A0E3           MOV      R0,#+3
   \   00000148   ........           BL       cpWriteMac
    401            cpWriteMac(MAXLEN,0x05EE);
   \   0000014C   EE10A0E3           MOV      R1,#+238
   \   00000150   501E81E3           ORR      R1,R1,#0x500
   \   00000154   0500A0E3           MOV      R0,#+5
   \   00000158   ........           BL       cpWriteMac
    402            write_CP2200(FLASHADDRL,0xFA);
   \   0000015C   FA10A0E3           MOV      R1,#+250
   \   00000160   6800A0E3           MOV      R0,#+104
   \   00000164   ........           BL       write_CP2200
    403            write_CP2200(FLASHADDRH,0x1F);
   \   00000168   1F10A0E3           MOV      R1,#+31
   \   0000016C   6900A0E3           MOV      R0,#+105
   \   00000170   ........           BL       write_CP2200
    404            tmp16 = 0x0000;
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   0040B0E1           MOVS     R4,R0
    405          	tmp16 = read_CP2200(FLASHAUTORD);
   \   0000017C   0500A0E3           MOV      R0,#+5
   \   00000180   ........           BL       read_CP2200
   \   00000184   0040B0E1           MOVS     R4,R0
    406            tmp16 |=read_CP2200(FLASHAUTORD)<<8;
   \   00000188   0500A0E3           MOV      R0,#+5
   \   0000018C   ........           BL       read_CP2200
   \   00000190   000494E1           ORRS     R0,R4,R0, LSL #+8
   \   00000194   0040B0E1           MOVS     R4,R0
    407            cpWriteMac(MACAD2,tmp16);
   \   00000198   0410B0E1           MOVS     R1,R4
   \   0000019C   1200A0E3           MOV      R0,#+18
   \   000001A0   ........           BL       cpWriteMac
    408          	tmp16 = 0x0000;
   \   000001A4   0000A0E3           MOV      R0,#+0
   \   000001A8   0040B0E1           MOVS     R4,R0
    409            tmp16 = read_CP2200(FLASHAUTORD);
   \   000001AC   0500A0E3           MOV      R0,#+5
   \   000001B0   ........           BL       read_CP2200
   \   000001B4   0040B0E1           MOVS     R4,R0
    410            tmp16 |= read_CP2200(FLASHAUTORD)<<8;
   \   000001B8   0500A0E3           MOV      R0,#+5
   \   000001BC   ........           BL       read_CP2200
   \   000001C0   000494E1           ORRS     R0,R4,R0, LSL #+8
   \   000001C4   0040B0E1           MOVS     R4,R0
    411            cpWriteMac(MACAD1,tmp16);
   \   000001C8   0410B0E1           MOVS     R1,R4
   \   000001CC   1100A0E3           MOV      R0,#+17
   \   000001D0   ........           BL       cpWriteMac
    412            tmp = 0x0000;
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   0010CDE5           STRB     R1,[SP, #+0]
    413          	tmp16 = read_CP2200(FLASHAUTORD);
   \   000001DC   0500A0E3           MOV      R0,#+5
   \   000001E0   ........           BL       read_CP2200
   \   000001E4   0040B0E1           MOVS     R4,R0
    414            tmp16 |= read_CP2200(FLASHAUTORD)<<8;
   \   000001E8   0500A0E3           MOV      R0,#+5
   \   000001EC   ........           BL       read_CP2200
   \   000001F0   000494E1           ORRS     R0,R4,R0, LSL #+8
   \   000001F4   0040B0E1           MOVS     R4,R0
    415            cpWriteMac(MACAD0,tmp16);
   \   000001F8   0410B0E1           MOVS     R1,R4
   \   000001FC   1000A0E3           MOV      R0,#+16
   \   00000200   ........           BL       cpWriteMac
    416          	write_CP2200(IOPWR,0x0C);
   \   00000204   0C10A0E3           MOV      R1,#+12
   \   00000208   7000A0E3           MOV      R0,#+112
   \   0000020C   ........           BL       write_CP2200
    417            cpWriteMac(MACCN,0x01);
   \   00000210   0110A0E3           MOV      R1,#+1
   \   00000214   0000A0E3           MOV      R0,#+0
   \   00000218   ........           BL       cpWriteMac
    418          	write_CP2200(INT0EN,0x03);
   \   0000021C   0310A0E3           MOV      R1,#+3
   \   00000220   6400A0E3           MOV      R0,#+100
   \   00000224   ........           BL       write_CP2200
    419          	write_CP2200(INT1EN,0x00);
   \   00000228   0010A0E3           MOV      R1,#+0
   \   0000022C   7D00A0E3           MOV      R0,#+125
   \   00000230   ........           BL       write_CP2200
    420          	read_CP2200(CP2200_INT0); 
   \   00000234   6300A0E3           MOV      R0,#+99
   \   00000238   ........           BL       read_CP2200
    421          	read_CP2200(CP2200_INT1); 
   \   0000023C   7F00A0E3           MOV      R0,#+127
   \   00000240   ........           BL       read_CP2200
    422          }
   \   00000244   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000248   1EFF2FE1           BX       LR               ;; return
    423          
    424          
    425          // ---------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    426          static void cpWriteMac(char adr,int value)
    427          {
   \                     cpWriteMac:
   \   00000000   38402DE9           PUSH     {R3-R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    428            write_CP2200(MACADDR,adr);
   \   0000000C   0410B0E1           MOVS     R1,R4
   \   00000010   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000014   0A00A0E3           MOV      R0,#+10
   \   00000018   ........           BL       write_CP2200
    429            write_CP2200(MACDATAH,value>>8);
   \   0000001C   4514B0E1           ASRS     R1,R5,#+8
   \   00000020   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000024   0B00A0E3           MOV      R0,#+11
   \   00000028   ........           BL       write_CP2200
    430            write_CP2200(MACDATAL,value);
   \   0000002C   0510B0E1           MOVS     R1,R5
   \   00000030   FF1011E2           ANDS     R1,R1,#0xFF      ;; Zero extend
   \   00000034   0C00A0E3           MOV      R0,#+12
   \   00000038   ........           BL       write_CP2200
    431            write_CP2200(MACRW,1);
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E3           MOV      R0,#+13
   \   00000044   ........           BL       write_CP2200
    432          }
   \   00000048   3140BDE8           POP      {R0,R4,R5,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     uip_buf

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     CP2200_ReadPacket        16
     CP2200_WritePacket       16
     CP2200_WriteTXBuffer     16
     Init_CP2000              16
     cpWriteMac               16
     network_device_init      16
     network_device_read      16
     network_device_send       8
     read_CP2200               0
     write_CP2200              0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     eaddr                   8
     CP2200_status           1
     CP2200_WriteTXBuffer   68
     CP2200_ReadPacket     124
     network_device_read   188
     CP2200_WritePacket    356
     network_device_send    16
     write_CP2200          372
     read_CP2200           296
     network_device_init   420
     Init_CP2000           588
     cpWriteMac             80
     ??DataTable3            4

 
     9 bytes in section .bss
 2 512 bytes in section .text
 
 2 512 bytes of CODE memory
     9 bytes of DATA memory

Errors: none
Warnings: none
